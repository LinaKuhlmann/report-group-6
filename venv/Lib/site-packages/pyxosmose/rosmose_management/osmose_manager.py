from pyxosmose.models.project import Project
from pyxosmose.models.et import Et
from pyxosmose.models.layer import Layer
from pyxosmose.models.unit import Unit
from pyxosmose.models.unit_param import UnitParam
from pyxosmose.models.stream import Stream
from pyxosmose.models.basicstream import OtherStreamData
from pyxosmose.models.heatstream import HeatStreamData
from pyxosmose.rosmose_management.chunks_utility import *

import pickle


class OsmoseManager:
    def __init__(self, tags):
        self.__ets = []
        self.__tags = tags
        self.__options: dict = {}

    @property
    def ets(self):
        return self.__ets

    @ets.setter
    def ets(self, value):
        if type(value) is list:
            self.__ets = value
        else:
            raise TypeError('Expected ets as list')

    def add_et(self, energy_technology):
        if type(energy_technology) is Et:
            self.__ets.append(energy_technology)

    def get_et_by_name(self, name):
        return next((et for et in self.__ets if et.name == name), None)

    def get_unit_by_name(self, name):
        units = [unit for et in self.__ets for unit in et.units if unit.unitname == name]
        if len(units) > 0:
            return units[0]
        raise Exception("Error: No unit found with name: " + name)

    def get_layer_by_name(self, name):
        layers = [layer for et in self.__ets for layer in et.layers if layer.name == name]
        if len(layers) > 0:
            return layers[0]
        raise Exception("Error: No layer found with name: " + name)

    def create_project_object(self, element, project_data):
        project = Project()
        project.objective = element['objective']
        project.name = element['project_name']
        for el in element['ets']:
            model = self.get_et_by_name(el)
            if model is not None:
                project.ets.append(model)
            else:
                raise Exception("No ET found with name: " + el)
        for line in project_data:
            data = line.split("|")[1:-1]
            data = self.__tags.replace_tags(data)
            if "time" in data[0]:
                period_key = []
                period_val = []
                for x in range(1, len(data)):
                    period_key.append("P" + str(x))
                    period_val.append(data[x])
                project.period_keys = period_key
                project.period_values = period_val
        project.periods = str(len(project.period_keys))
        project.options = self.options
        return project

    def create_et(self, et_name, code):
        properties_data = retrieve_table_content(code)
        et_temp = self.get_et_by_name(et_name)
        et_exists = False
        if et_temp is None:
            et = Et(et_name)
        else:
            et = et_temp
            et_exists = True
        for line in properties_data:
            property_data = line.split("|")[1:-1]
            property_data = self.__tags.replace_tags(property_data)
            if property_data[0] == 'capex_weight_factor':
                et.capex_weight_factor = property_data[1]
            elif property_data[0] == 'co2_tax':
                et.co2_tax = property_data[1]
        if not et_exists:
            self.add_et(et)

    def add_layers_to_et(self, et_name, code):
        layers_data = retrieve_table_content(code)
        model = self.get_et_by_name(et_name)
        if model is not None:
            for line in layers_data:
                layer_data = line.split("|")[1:-1]
                layer_data = self.__tags.replace_tags(layer_data)
                layer = Layer(name=layer_data[0], display_name=layer_data[1], short_name=layer_data[2],
                              unit=layer_data[3],
                              color=layer_data[4])
                layer_found = [i for i, layer_tmp in enumerate(model.layers) if layer_tmp.name == layer.name]
                if len(layer_found) == 0:
                    model.add_layers(layer)
                else:
                    model.layers[layer_found[0]] = layer
        else:
            raise Exception("ET with name " + et_name + " doesn't exists")

    def add_unit_to_et(self, et_name, code):
        unit_data = retrieve_table_content(code)
        model = self.get_et_by_name(et_name)
        if model is not None:
            units_temp = []
            for line in unit_data:
                data = line.split("|")[1:-1]
                data = self.__tags.replace_tags(data)
                units = list(filter(lambda energy_unit: energy_unit.unitname == data[0], model.units))
                if len(units) > 0:
                    unit = units[0]
                    unit.type = data[1]
                    units_temp.append(unit)
                else:
                    unit = Unit()
                    unit.unitname = data[0]
                    unit.type = data[1]
                    units_temp.append(unit)
            model.units = units_temp
        else:
            raise Exception("ET with name " + et_name + " doesn't exists")

    def add_unit_param(self, element, code):
        unit_params_data = retrieve_table_content(code)
        unit = self.get_unit_by_name(element)
        params_table = []
        for line in unit_params_data:
            param_data = line.split("|")[1:-1]
            param_data = self.__tags.replace_tags(param_data)
            unit_param = UnitParam()
            period = ""
            if len(param_data) == 9:
                period = param_data[0]
                unit_param.cost1 = param_data[1]
                unit_param.cost2 = param_data[2]
                unit_param.cinv1 = param_data[3]
                unit_param.cinv2 = param_data[4]
                unit_param.imp1 = param_data[5]
                unit_param.imp2 = param_data[6]
                unit_param.fmin = param_data[7]
                unit_param.fmax = param_data[8]
                params_table.append({
                    'period': period,
                    'cost1': unit_param.cost1,
                    'cost2': unit_param.cost2,
                    'cinv1': unit_param.cinv1,
                    'cinv2': unit_param.cinv2,
                    'imp1': unit_param.imp1,
                    'imp2': unit_param.imp2,
                    'fmin': unit_param.fmin,
                    'fmax': unit_param.fmax
                })
            elif len(param_data) == 8:
                period = 'default'
                unit_param.cost1 = param_data[0]
                unit_param.cost2 = param_data[1]
                unit_param.cinv1 = param_data[2]
                unit_param.cinv2 = param_data[3]
                unit_param.imp1 = param_data[4]
                unit_param.imp2 = param_data[5]
                unit_param.fmin = param_data[6]
                unit_param.fmax = param_data[7]
                params_table.append({
                    'cost1': unit_param.cost1,
                    'cost2': unit_param.cost2,
                    'cinv1': unit_param.cinv1,
                    'cinv2': unit_param.cinv2,
                    'imp1': unit_param.imp1,
                    'imp2': unit_param.imp2,
                    'fmin': unit_param.fmin,
                    'fmax': unit_param.fmax
                })
            unit.add_unit_params(period, unit_param)
        return params_table

    def add_unit_heat_streams(self, element, code):
        streams_data = retrieve_table_content(code)
        unit = self.get_unit_by_name(element)
        params_table = []
        for line in streams_data:
            stream_data = line.split("|")[1:-1]
            stream_data = self.__tags.replace_tags(stream_data)
            period = 'default'
            tin = ""
            tout = ""
            hin = ""
            hout = ""
            dtmin = ""
            alpha = ""
            if len(stream_data) == 8:
                name = stream_data[0]
                period = stream_data[1]
                tin = stream_data[2]
                tout = stream_data[3]
                hin = stream_data[4]
                hout = stream_data[5]
                dtmin = stream_data[6]
                alpha = stream_data[7]
                params_table.append({
                    'name': name,
                    'period': period,
                    'Tin': tin,
                    'Tout': tout,
                    'Hin': hin,
                    'Hout': hout,
                    'DT min/2': dtmin,
                    'alpha': alpha
                })
            elif len(stream_data) == 7:
                name = stream_data[0]
                tin = stream_data[1]
                tout = stream_data[2]
                hin = stream_data[3]
                hout = stream_data[4]
                dtmin = stream_data[5]
                alpha = stream_data[6]
                params_table.append({
                    'name': name,
                    'Tin': tin,
                    'Tout': tout,
                    'Hin': hin,
                    'Hout': hout,
                    'DT min/2': dtmin,
                    'alpha': alpha
                })
            stream_registered_in_unit = False
            stream = Stream()
            for unit_stream in unit.streams:
                if unit_stream.name == stream_data[0]:
                    stream = unit_stream
                    stream_registered_in_unit = True
            if stream_registered_in_unit:
                stream.add_datas(period, HeatStreamData(tin=tin, tout=tout, hin=hin, hout=hout, dtmin=dtmin,
                                                        alpha=alpha, temperature_unit='C', hentalpy_unit='kW'))
            else:
                stream.name = stream_data[0]
                stream.type = "heat"
                stream.is_heat = True
                stream.add_datas(period, HeatStreamData(tin=tin, tout=tout, hin=hin, hout=hout, dtmin=dtmin,
                                                        alpha=alpha, temperature_unit='C', hentalpy_unit='kW'))
                unit.add_stream(stream)
        return params_table

    def add_unit_resource_streams(self, element, code):
        streams_data = retrieve_table_content(code)
        unit = self.get_unit_by_name(element)
        if unit is not None:
            params_table = []
            for line in streams_data:
                stream_data = line.split("|")[1:-1]
                stream_data = self.__tags.replace_tags(stream_data)
                stream_registered_in_unit = False
                stream = Stream()
                for unit_stream in unit.streams:
                    if unit_stream.name == stream_data[0]:
                        stream = unit_stream
                        stream_registered_in_unit = True
                layer = self.get_layer_by_name(stream_data[0])
                period = "default"
                value = ""
                direction = "in"
                if layer is not None:
                    if len(stream_data) == 4:
                        layer_name = layer.name
                        direction = stream_data[1]
                        period = stream_data[2]
                        value = stream_data[3]
                        params_table.append({
                            'layer': layer_name,
                            'direction': direction,
                            'period': period,
                            'value': value
                        })
                    elif len(stream_data) == 3:
                        layer_name = layer.name
                        direction = stream_data[1]
                        value = stream_data[2]
                        params_table.append({
                            'layer': layer_name,
                            'direction': direction,
                            'value': value
                        })
                    else:
                        params_table.append({
                            'len(stream_data)': len(stream_data)
                        })
                    if stream_registered_in_unit:
                        stream.add_datas(period, OtherStreamData(value))
                    else:
                        stream.name = layer.name
                        stream.type = layer.short_name
                        stream.is_heat = False
                        stream.unit = layer.unit
                        stream.direction = direction
                        stream.add_datas(period, OtherStreamData(value))
                        unit.add_stream(stream)
            return params_table

    def save_et(self, et_name):
        model = self.get_et_by_name(et_name)
        if model is not None:
            with open("et.data", "wb") as data_file:
                pickle.dump(model, data_file)

    @property
    def options(self):
        return self.__options

    @options.setter
    def options(self, value):
        if type(value) is dict:
            self.__options = value
        else:
            raise TypeError('Expected options as dict')

    def add_option(self, name: str, option: dict):
        self.__options[name] = option

    def get_option_by_name(self, name):
        return next((option for option in self.__options if option.name == name), None)

    def create_option(self, option_name, code):
        properties_data = retrieve_table_content(code)
        option_temp = self.get_option_by_name(option_name)
        option_exists = False
        if option_temp is None:
            option = {}
        else:
            option = option_temp
            option_exists = True
        for line in properties_data:
            property_data = line.split("|")[1:-1]
            property_data = self.__tags.replace_tags(property_data)
            option[property_data[0]] = property_data[1]
        if not option_exists:
            self.add_option(option_name, option)

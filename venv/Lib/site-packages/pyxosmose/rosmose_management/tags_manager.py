from pyxosmose.models.tag import Tag

import pickle


class TagsManager:
    def __init__(self):
        self.__tags = []

    @property
    def tags(self):
        return self.__tags

    @tags.setter
    def tags(self, value):
        if type(value) is list:
            self.__tags = value
        else:
            raise TypeError('Expected tags as list')

    def replace_tags(self, data):
        i = 0
        for el in data:
            el = el.strip()
            data[i] = el
            if el.startswith('%') and el.endswith('%'):
                tag_name = el[1:-1]
                for tag in self.__tags:
                    if tag.name == tag_name:
                        data[i] = tag.value
            i = i + 1
        return data

    def get_tag_by_name(self, name):
        return next((et for et in self.__tags if et.name == name), None)

    def generate_tag(self, software, value):
        tag_exists = False
        tag_name = value[0].strip()
        tag = None
        if software == 'aspen':
            if len(value) == 5:
                tag = Tag(name=tag_name, value=value[2].strip(), unit=value[3].strip(),
                          description=value[4].strip(), path=value[1].strip())
            if len(value) == 4:
                tag = Tag(name=tag_name, unit=value[2].strip(), description=value[3].strip(), path=value[1].strip())
        elif software == 'vali':
            if len(value) == 3:
                tag = Tag(name=tag_name, unit=value[1].strip(), description=value[2].strip())
            if len(value) == 4:
                tag = Tag(name=tag_name, value=value[1].strip(), unit=value[2].strip(),
                          description=value[3].strip())
            if len(value) == 6:
                tag = Tag(name=tag_name, value=value[1].strip(), min=value[2].strip(), max=value[3].strip(),
                          unit=value[4].strip(), description=value[5].strip())
        if tag is not None:
            for t in self.__tags:
                if t.name == tag_name:
                    self.__tags.remove(t)
                    self.__tags.append(tag)
                    tag_exists = True
                    break
            if not tag_exists:
                self.__tags.append(tag)
            return tag
        raise Exception("Invalid software TAG creation...")

    def save_tags(self):
        with open("tags.data", "wb") as data_file:
            pickle.dump(self.__tags, data_file)

    def load_tags(self):
        with open("tags.data", "rb") as data_file:
            loaded_tags = pickle.load(data_file)

        for tag in loaded_tags:
            tag_exists = False
            for t in self.__tags:
                if t.name == tag.name:
                    self.__tags.remove(t)
                    self.__tags.append(tag)
                    tag_exists = True
            if not tag_exists:
                self.__tags.append(tag)

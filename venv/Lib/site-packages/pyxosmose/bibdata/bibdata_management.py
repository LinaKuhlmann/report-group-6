import re
from pybtex.database.input import bibtex
from datetime import datetime


class BibDataManagement:
    def __init__(self, file_path, pattern):
        self.__default_tech = self.__read_pattern(pattern)
        self.__db = self.__read_technology(self.__default_tech["technology_name"], file_path)

    def get_database(self):
        database = []
        for key in self.__default_tech["keys"]:
            database.append({
                "cite_key": None,
                "title": None,
                "year": datetime.now().strftime('%Y'),
                "month": datetime.now().strftime('%B'),
                "abstract": None,
                "annotation": None,
                "file": None,
                "rowname": self.__default_tech["rowname"],
                "sets": self.__default_tech["sets"],
                "general_description": self.__default_tech["general_description"],
                "technology_key": key["key"],
                "min": key["min"],
                "value": key["value"],
                "max": key["max"],
                "unit": key["unit"],
                "shortname": key["shortname"],
                "long_description": key["long_description"]
            })
        rowname = 1
        for data in self.__db:
            for key in data["technologies"]:
                if data["rowname"] != "":
                    rowname = rowname - 1
                database.append({
                    "cite_key": data["cite_key"],
                    "title": data["title"],
                    "year": data["year"],
                    "month": data["month"],
                    "abstract": data["abstract"],
                    "annotation": data["annotation"],
                    "file": data["file"],
                    "rowname": str(rowname) if data["rowname"] == "" else data["rowname"],
                    "sets": data["sets"],
                    "general_description": data["general_description"],
                    "technology_key": key["key"],
                    "min": key["min"],
                    "value": key["value"],
                    "max": key["max"],
                    "unit": key["unit"],
                    "shortname": key["shortname"],
                    "long_description": key["long_description"]
                })
                rowname = rowname + 1
        return database

    def __read_technology(self, technology_name, bib_path):
        techs = self.__get_bib_file_technologies(bib_path, technology_name)
        techs = self.__filter_technologies_by_technology_name(techs, technology_name)
        return techs

    def __get_bib_file_technologies(self, bib_path, technology_name):
        technologies = []
        parser = bibtex.Parser()
        bib_data = parser.parse_file(bib_path)
        for el in bib_data.entries.keys():
            tech = {}
            tech["cite_key"] = el
            if "annote" in bib_data.entries[el].fields:
                notes = bib_data.entries[el].fields['annote']
            elif "note" in bib_data.entries[el].fields:
                notes_txt = bib_data.entries[el].fields['note']
                n = re.findall("\+- (.*?) \+-", notes_txt)
                notes = []
                for elem in n:
                    note = {}
                    elements = []
                    elements_tmp = elem.split("\\par")
                    for temp in elements_tmp:
                        if temp != "":
                            elements.append(temp.strip())
                    name, row_name, sets, general_description = self.read_technology_header(elements[0])
                    note["technology"] = name
                    note["keys"] = elements[1:]
                    notes.append(note)
            tech["title"] = bib_data.entries[el].fields['title']
            tech["year"] = bib_data.entries[el].fields['year']
            tech["month"] = bib_data.entries[el].fields['month']
            tech["abstract"] = bib_data.entries[el].fields['abstract']
            tech["annotation"] = bib_data.entries[el].fields['annotation']
            tech["file"] = bib_data.entries[el].fields['file']
            tech["technology_name"] = technology_name
            tech["technology_name"] = name
            tech["rowname"] = row_name
            tech["sets"] = sets
            tech["general_description"] = general_description
            tech["technologies"] = notes
            technologies.append(tech)
        return technologies

    def __filter_technologies_by_technology_name(self, techs, technology_name):
        filtered_technologies = []
        for tech in techs:
            technologies = [t for t in tech["technologies"] if t["technology"] == technology_name]
            if len(technologies) > 0:
                tech["technologies"] = technologies[0]["keys"]
                tech["technologies"] = list(map(self.read_tag, tech["technologies"]))
                filtered_technologies.append(tech)
        return filtered_technologies

    def __read_pattern(self, pattern):
        rows = pattern.split("\n")
        technology = {}
        technology["keys"] = []
        for row in rows:
            if "+-" in row:
                if row != "+-":
                    tech_params = row.split("+-")[1]
                    name, row_name, sets, general_description = self.read_technology_header(tech_params)
                    technology["technology_name"] = name
                    technology["rowname"] = row_name
                    technology["sets"] = sets
                    technology["general_description"] = general_description
            else:
                key = self.read_tag(row)
                if key is not None:
                    technology["keys"].append(key)
        return technology

    @staticmethod
    def read_tag(data):
        key = {}
        if "#" in data:
            val, desc = data.split("#")
            if ":" in desc:
                shortname, long_description = desc.split(":")
                shortname = shortname.strip()
                long_description = long_description.strip()
            else:
                shortname = None
                long_description = desc.strip()
        else:
            long_description = None
            shortname = None
            val = data
        if val != "":
            name, value, unit = re.findall(r"^(.*) = (.*) \[(.*)\]", val)[0]
            key["key"] = name
            if ":" in value:
                values = value.split(":")
                if len(values) == 3:
                    key["min"] = values[0]
                    key["value"] = values[1]
                    key["max"] = values[2]
                elif len(values) == 2:
                    key["min"] = values[0]
                    key["value"] = values[1]
                    key["max"] = values[1]
            else:
                key["min"] = value
                key["value"] = value
                key["max"] = value
            key["unit"] = unit
            key["shortname"] = shortname
            key["long_description"] = long_description
            return key

    @staticmethod
    def read_technology_header(data):
        name = ""
        row_name = ""
        sets = []
        general_description = ""
        parameters = data.split("#")
        name = parameters[0].strip()
        if len(parameters) > 1:
            technology_parameters = parameters[1].strip()
            parameters_elements = technology_parameters.split(":")
            row_name = parameters_elements[0].strip()
            if len(parameters_elements) == 2:
                sets_txt = parameters_elements[1].strip()
                if "[" in sets_txt and "]" in sets_txt:
                    sets_txt = sets_txt[1:-1]
                    sets_txt = sets_txt.split(",")
                    for set_value in sets_txt:
                        sets.append(set_value.strip())
                    sets = list(set(sets))
                else:
                    general_description = sets_txt.strip()
            elif len(parameters_elements) == 3:
                sets_txt = parameters_elements[1].strip()
                if "[" in sets_txt and "]" in sets_txt:
                    sets_txt = sets_txt[1:-1]
                    sets_txt = sets_txt.split(",")
                    for set_value in sets_txt:
                        sets.append(set_value.strip())
                    sets = list(set(sets))
                    general_description = parameters_elements[2].strip()
        return name, row_name, sets, general_description

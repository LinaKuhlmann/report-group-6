# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

import filecmp
import os
import tempfile
import unittest

from pyxosmose.rosmose import Rosmose
from pyxosmose.tests.rosmose_utility import *
from pyxosmose.tests.rosmose_florez_utility import *
from pyxosmose.models.project import Project
from pyxosmose.models.et import Et
from pyxosmose.models.layer import Layer
from pyxosmose.models.unit import Unit
from pyxosmose.models.unit_param import UnitParam
from pyxosmose.models.stream import Stream
from pyxosmose.models.basicstream import OtherStreamData
from pyxosmose.models.heatstream import HeatStreamData



class RosmoseTagsTests(unittest.TestCase):
    def setUp(self):
        self.ro = Rosmose()

    def tearDown(self):
        self.ro = None

    def test_001_tags_and_streams_for_coolingtower(self):
        self.ro.retrieve_type(coolingtower_create_et())
        self.ro.retrieve_type(coolingtower_create_tags())
        self.assertEqual(len(self.ro.tags_manager.tags), 6)
        self.ro.retrieve_type(coolingtower_create_calculated_params())
        self.assertEqual(len(self.ro.tags_manager.tags), 7)
        self.ro.retrieve_type(coolingtower_create_layers())
        self.ro.retrieve_type(coolingtower_create_units())
        self.ro.retrieve_type(coolingtower_create_unit_param())
        self.ro.retrieve_type(coolingtower_create_rs())
        self.ro.retrieve_type(coolingtower_create_hs())
        coolingtower = self.ro.osmose_manager.get_et_by_name('coolingtower')
        erefct = self.ro.tags_manager.get_tag_by_name('E_ref_CT')
        self.assertEqual(erefct.value, "21.0")
        self.assertTrue(erefct.unit == "kW")
        self.assertTrue(erefct.description == "Electricity consumption")
        elec = list(filter(lambda stream: stream.name == 'ELECTRICITY', coolingtower.units[0].streams))[0]
        self.assertEqual(elec.datas["default"].value, "21.0")
        cooltin = self.ro.tags_manager.get_tag_by_name('Cool_Tin')
        cooltout = self.ro.tags_manager.get_tag_by_name('Cool_Tout')
        coolqmax = self.ro.tags_manager.get_tag_by_name('Cool_Qmax')
        coolelec = self.ro.tags_manager.get_tag_by_name('Cool_Elec')
        dtminliq = self.ro.tags_manager.get_tag_by_name('dtmin_liq')
        self.assertTrue(cooltin.value == "15")
        self.assertTrue(cooltin.unit == "C")
        self.assertTrue(cooltin.description == "Cooling tower temperature inlet")
        self.assertTrue(cooltout.value == "25")
        self.assertTrue(cooltout.unit == "C")
        self.assertTrue(cooltout.description == "Cooling tower temperature outlet")
        self.assertTrue(coolqmax.value == "1000")
        self.assertTrue(coolqmax.unit == "kW")
        self.assertTrue(coolqmax.description == "Cooling tower reference heat load")
        self.assertTrue(coolelec.value == "0.021")
        self.assertTrue(coolelec.unit == "kW/kW")
        self.assertTrue(coolelec.description == "Cooling Tower electricity input kWel/kWth")
        self.assertTrue(dtminliq.value == "5")
        self.assertTrue(dtminliq.unit == "C")
        self.assertTrue(dtminliq.description == "Cooling tower reference heat load")

    def test_002_tags_and_streams_for_furnace(self):
        self.ro.retrieve_type(furnace_create_et())
        self.ro.retrieve_type(furnace_create_tags())
        self.assertEqual(len(self.ro.tags_manager.tags), 16)
        self.ro.retrieve_type(furnace_create_calculated_params())
        self.assertEqual(len(self.ro.tags_manager.tags), 26)
        self.ro.retrieve_type(furnace_create_layers())
        self.ro.retrieve_type(furnace_create_units())
        self.ro.retrieve_type(furnace_create_unit_param())
        self.ro.retrieve_type(furnace_create_rs())
        self.ro.retrieve_type(furnace_create_hs())
        furnace = self.ro.osmose_manager.get_et_by_name('furnace')
        cpg = self.ro.tags_manager.get_tag_by_name('cpg')
        tad_corr = self.ro.tags_manager.get_tag_by_name('Tad_corr')
        self.assertEqual(cpg.value, "0.5")
        self.assertEqual(tad_corr.value, "1997.4456288656088")
        self.assertEqual(len(furnace.units[0].streams), 3)
        radiation = list(filter(lambda stream: stream.name == 'radiation', furnace.units[0].streams))[0]
        convection = list(filter(lambda stream: stream.name == 'convection', furnace.units[0].streams))[0]
        preheating = list(filter(lambda stream: stream.name == 'preheating', furnace.units[0].streams))[0]
        trad = self.ro.tags_manager.get_tag_by_name('Trad')
        q_radpreh = self.ro.tags_manager.get_tag_by_name('Q_radpreh')
        dtmin_radiation = self.ro.tags_manager.get_tag_by_name('dtmin_radiation')
        tstack = self.ro.tags_manager.get_tag_by_name('Tstack')
        q_conv_gross = self.ro.tags_manager.get_tag_by_name('Q_conv_gross')
        dtmin_convection = self.ro.tags_manager.get_tag_by_name('dtmin_convection')
        to = self.ro.tags_manager.get_tag_by_name('To')
        tprin = self.ro.tags_manager.get_tag_by_name('Tprin')
        q_preh = self.ro.tags_manager.get_tag_by_name('Q_preh')
        self.assertEqual(radiation.datas["default"].tin, trad.value)
        self.assertEqual(radiation.datas["default"].tout, trad.value)
        self.assertEqual(radiation.datas["default"].hin, q_radpreh.value)
        self.assertEqual(radiation.datas["default"].dtmin, dtmin_radiation.value)
        self.assertEqual(convection.datas["default"].tin, trad.value)
        self.assertEqual(convection.datas["default"].tout, tstack.value)
        self.assertEqual(convection.datas["default"].hin, q_conv_gross.value)
        self.assertEqual(convection.datas["default"].dtmin, dtmin_convection.value)
        self.assertEqual(preheating.datas["default"].tin, to.value)
        self.assertEqual(preheating.datas["default"].tout, tprin.value)
        self.assertEqual(preheating.datas["default"].hout, q_preh.value)
        self.assertEqual(preheating.datas["default"].dtmin, dtmin_convection.value)

    def test_003_tags_and_streams_for_heatpump(self):
        self.ro.retrieve_type(heatpump_create_et())
        self.ro.retrieve_type(heatpump_create_tags())
        self.assertEqual(len(self.ro.tags_manager.tags), 7)
        self.ro.retrieve_type(heatpump_create_calculated_params())
        self.assertEqual(len(self.ro.tags_manager.tags), 11)
        self.ro.retrieve_type(heatpump_create_layers())
        self.ro.retrieve_type(heatpump_create_units())
        self.ro.retrieve_type(heatpump_create_unit_param())
        self.ro.retrieve_type(heatpump_create_rs())
        self.ro.retrieve_type(heatpump_create_hs())
        heatpump = self.ro.osmose_manager.get_et_by_name('heatpump')
        w_heatpump = self.ro.tags_manager.get_tag_by_name('W_heatpump')
        evap_Tin = self.ro.tags_manager.get_tag_by_name('Evap_Tin')
        evap_Tout = self.ro.tags_manager.get_tag_by_name('Evap_Tout')
        evap_Qmax = self.ro.tags_manager.get_tag_by_name('Evap_Qmax')
        evaporation = list(filter(lambda stream: stream.name == 'evaporation', heatpump.units[0].streams))[0]
        electricity = list(filter(lambda stream: stream.name == 'ELECTRICITY', heatpump.units[0].streams))[0]
        self.assertEqual(evaporation.datas["default"].tin, evap_Tin.value)
        self.assertEqual(evaporation.datas["default"].tout, evap_Tout.value)
        self.assertEqual(evaporation.datas["default"].hout, evap_Qmax.value)
        self.assertEqual(electricity.datas["default"].value, w_heatpump.value)

    def test_004_tags_and_streams_for_market(self):
        self.ro.retrieve_type(market_create_et())
        self.ro.retrieve_type(market_create_tags())
        self.assertEqual(len(self.ro.tags_manager.tags), 16)
        self.ro.retrieve_type(market_create_calculated_params())
        self.assertEqual(len(self.ro.tags_manager.tags), 27)
        self.ro.retrieve_type(market_create_layers())
        self.ro.retrieve_type(market_create_units())
        self.ro.retrieve_type(market_create_unit_param_for_elecsell())
        self.ro.retrieve_type(market_create_rs_for_elecsell())
        self.ro.retrieve_type(market_create_unit_param_for_natgassell())
        self.ro.retrieve_type(market_create_rs_for_natgassell())
        self.ro.retrieve_type(market_create_unit_param_for_watersell())
        self.ro.retrieve_type(market_create_rs_for_watersell())
        self.ro.retrieve_type(market_create_unit_param_for_milkbuy())
        self.ro.retrieve_type(market_create_rs_for_milkbuy())
        self.ro.retrieve_type(market_create_unit_param_for_co2buy())
        self.ro.retrieve_type(market_create_rs_for_co2buy())

    def test_005_tags_and_streams_for_refrigerator(self):
        self.ro.retrieve_type(refrigerator_create_et())
        self.ro.retrieve_type(refrigerator_create_tags())
        self.assertEqual(len(self.ro.tags_manager.tags), 7)
        self.ro.retrieve_type(refrigerator_create_calculated_params())
        self.assertEqual(len(self.ro.tags_manager.tags), 11)
        self.ro.retrieve_type(refrigerator_create_layers())
        self.ro.retrieve_type(refrigerator_create_units())
        self.ro.retrieve_type(refrigerator_create_unit_param())
        self.ro.retrieve_type(refrigerator_create_rs())
        self.ro.retrieve_type(refrigerator_create_hs())

    def test_006_display_aspen_tags(self):
        res = self.ro.retrieve_type(create_aspen_model())
        self.assertTrue(res[0])
        res = self.ro.retrieve_type(create_aspen_interfaces())
        self.assertFalse(res[0])
        res = self.ro.retrieve_type(display_tags())
        self.assertTrue(res[0])
        #print(res[1])
        #print(res[2])
        res = self.ro.retrieve_type(display_all_tags())
        self.assertTrue(res[0])
        #print(res[1])
        #print(res[2])


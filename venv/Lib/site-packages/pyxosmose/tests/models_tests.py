# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

import filecmp
import os
import tempfile
import unittest

from pyxosmose.models.project import Project
from pyxosmose.models.et import Et
from pyxosmose.models.layer import Layer
from pyxosmose.models.unit import Unit
from pyxosmose.models.unit_param import UnitParam
from pyxosmose.models.stream import Stream
from pyxosmose.models.basicstream import OtherStreamData
from pyxosmose.models.heatstream import HeatStreamData


def get_unit_process(layer_ng):
    unit_process = Unit()
    unit_process.unitname = "process1"
    unit_process.type = "Process"

    unit_param1 = UnitParam()
    p1 = "P1"
    unit_param1.cost1 = "0"
    unit_param1.cost2 = "0"
    unit_param1.cinv1 = "0"
    unit_param1.cinv2 = "0"
    unit_param1.imp1 = "0"
    unit_param1.imp2 = "0"
    unit_param1.fmin = "1"
    unit_param1.fmax = "1"

    unit_param2 = UnitParam()
    p2 = "P2"
    unit_param2.cost1 = "0"
    unit_param2.cost2 = "0"
    unit_param2.cinv1 = "0"
    unit_param2.cinv2 = "0"
    unit_param2.imp1 = "0"
    unit_param2.imp2 = "0"
    unit_param2.fmin = "1"
    unit_param2.fmax = "1"
    unit_process.add_unit_params(p1, unit_param1)
    unit_process.add_unit_params(p2, unit_param2)

    ng_stream = Stream()
    ng_stream.name = layer_ng.name
    ng_stream.type = layer_ng.short_name
    ng_stream.is_heat = False
    ng_stream.unit = layer_ng.unit
    ng_stream.direction = "in"
    ng_stream.add_datas("P1", OtherStreamData('2.5'))
    ng_stream.add_datas("P2", OtherStreamData('2.5'))
    unit_process.add_stream(ng_stream)

    c1_heat_stream = Stream()
    c1_heat_stream.name = "C1"
    c1_heat_stream.type = "heat"
    c1_heat_stream.is_heat = True
    c1_heat_stream.add_datas("P1", HeatStreamData(tin='20', tout='135', hin='0', hout='230', dtmin='5', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))
    c1_heat_stream.add_datas("P2", HeatStreamData(tin='20', tout='135', hin='0', hout='230', dtmin='5', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))

    c2_heat_stream = Stream()
    c2_heat_stream.name = "C2"
    c2_heat_stream.type = "heat"
    c2_heat_stream.is_heat = True
    c2_heat_stream.add_datas("P1", HeatStreamData(tin='170', tout='60', hin='330', hout='0', dtmin='5', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))
    c2_heat_stream.add_datas("P2", HeatStreamData(tin='170', tout='60', hin='330', hout='0', dtmin='5', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))

    c3_heat_stream = Stream()
    c3_heat_stream.name = "C3"
    c3_heat_stream.type = "heat"
    c3_heat_stream.is_heat = True
    c3_heat_stream.add_datas("P1",
                             HeatStreamData(tin='80', tout='140', hin='0', hout='240', dtmin='5', alpha='0.5', temperature_unit='C°', hentalpy_unit='kW'))
    c3_heat_stream.add_datas("P2",
                             HeatStreamData(tin='80', tout='140', hin='0', hout='240', dtmin='5', alpha='0.5', temperature_unit='C°', hentalpy_unit='kW'))

    c4_heat_stream = Stream()
    c4_heat_stream.name = "C4"
    c4_heat_stream.type = "heat"
    c4_heat_stream.is_heat = True
    c4_heat_stream.add_datas("P1",
                             HeatStreamData(tin='150', tout='30', hin='180', hout='0', dtmin='5', alpha='0.2', temperature_unit='C°', hentalpy_unit='kW'))
    c4_heat_stream.add_datas("P2",
                             HeatStreamData(tin='150', tout='30', hin='180', hout='0', dtmin='5', alpha='0.2', temperature_unit='C°', hentalpy_unit='kW'))

    unit_process.add_stream(c1_heat_stream)
    unit_process.add_stream(c2_heat_stream)
    unit_process.add_stream(c3_heat_stream)
    unit_process.add_stream(c4_heat_stream)
    return unit_process


def get_unit_hotutility(layer_elec):
    unit_HotUtility = Unit()

    unit_HotUtility.unitname = "HotUtility"
    unit_HotUtility.type = "Utility"

    unit_HotUtility_param1 = UnitParam()
    p1 = "P1"
    unit_HotUtility_param1.cost1 = "0"
    unit_HotUtility_param1.cost2 = "0"
    unit_HotUtility_param1.cinv1 = "0"
    unit_HotUtility_param1.cinv2 = "0"
    unit_HotUtility_param1.imp1 = "0"
    unit_HotUtility_param1.imp2 = "0"
    unit_HotUtility_param1.fmin = "0"
    unit_HotUtility_param1.fmax = "10000"

    unit_HotUtility_param2 = UnitParam()
    p2 = "P2"
    unit_HotUtility_param2.cost1 = "0"
    unit_HotUtility_param2.cost2 = "0"
    unit_HotUtility_param2.cinv1 = "0"
    unit_HotUtility_param2.cinv2 = "0"
    unit_HotUtility_param2.imp1 = "0"
    unit_HotUtility_param2.imp2 = "0"
    unit_HotUtility_param2.fmin = "0"
    unit_HotUtility_param2.fmax = "10000"

    unit_HotUtility.add_unit_params(p1, unit_HotUtility_param1)
    unit_HotUtility.add_unit_params(p2, unit_HotUtility_param2)

    elec_stream = Stream()
    elec_stream.name = layer_elec.name
    elec_stream.type = layer_elec.short_name
    elec_stream.is_heat = False
    elec_stream.unit = layer_elec.unit
    elec_stream.direction = "in"
    elec_stream.add_datas("P1", OtherStreamData('1.25'))
    elec_stream.add_datas("P2", OtherStreamData('1.25'))
    unit_HotUtility.add_stream(elec_stream)

    s1_heat_stream = Stream()
    s1_heat_stream.name = "S1"
    s1_heat_stream.type = "heat"
    s1_heat_stream.is_heat = True
    s1_heat_stream.add_datas("P1", HeatStreamData(tin='350', tout='350', hin='1', hout='0', dtmin='5', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))
    s1_heat_stream.add_datas("P2", HeatStreamData(tin='350', tout='350', hin='1', hout='0', dtmin='5', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))
    unit_HotUtility.add_stream(s1_heat_stream)

    return unit_HotUtility


def get_unit_coolingwater(layer_elec):
    unit_CoolingWater = Unit()

    unit_CoolingWater.unitname = "CoolingWater"
    unit_CoolingWater.type = "Utility"

    unit_CoolingWater_param1 = UnitParam()
    p1 = "P1"
    unit_CoolingWater_param1.cost1 = "0"
    unit_CoolingWater_param1.cost2 = "0.0144"
    unit_CoolingWater_param1.cinv1 = "0"
    unit_CoolingWater_param1.cinv2 = "0"
    unit_CoolingWater_param1.imp1 = "0"
    unit_CoolingWater_param1.imp2 = "0"
    unit_CoolingWater_param1.fmin = "0"
    unit_CoolingWater_param1.fmax = "10000"

    unit_CoolingWater_param2 = UnitParam()
    p2 = "P2"
    unit_CoolingWater_param2.cost1 = "0"
    unit_CoolingWater_param2.cost2 = "0.0144"
    unit_CoolingWater_param2.cinv1 = "0"
    unit_CoolingWater_param2.cinv2 = "0"
    unit_CoolingWater_param2.imp1 = "0"
    unit_CoolingWater_param2.imp2 = "0"
    unit_CoolingWater_param2.fmin = "0"
    unit_CoolingWater_param2.fmax = "10000"

    unit_CoolingWater.add_unit_params(p1, unit_CoolingWater_param1)
    unit_CoolingWater.add_unit_params(p2, unit_CoolingWater_param2)

    elec_stream = Stream()
    elec_stream.name = layer_elec.name
    elec_stream.type = layer_elec.short_name
    elec_stream.is_heat = False
    elec_stream.unit = layer_elec.unit
    elec_stream.direction = "in"
    elec_stream.add_datas("P1", OtherStreamData('0.42'))
    elec_stream.add_datas("P2", OtherStreamData('0.42'))
    unit_CoolingWater.add_stream(elec_stream)

    cw1_heat_stream = Stream()
    cw1_heat_stream.name = "CW1"
    cw1_heat_stream.type = "heat"
    cw1_heat_stream.is_heat = True
    cw1_heat_stream.add_datas("P1", HeatStreamData(tin='15', tout='20', hin='0', hout='21', dtmin='2', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))
    cw1_heat_stream.add_datas("P2", HeatStreamData(tin='15', tout='20', hin='0', hout='21', dtmin='2', alpha='1', temperature_unit='C°', hentalpy_unit='kW'))

    unit_CoolingWater.add_stream(cw1_heat_stream)

    return unit_CoolingWater


def get_unit_ngasbuy(layer_ng):
    unit_NGas_buy = Unit()
    unit_NGas_buy.unitname = "NGas_buy"
    unit_NGas_buy.type = "Utility"

    unit_NGas_buy_param1 = UnitParam()
    p1 = "P1"
    unit_NGas_buy_param1.cost1 = "0"
    unit_NGas_buy_param1.cost2 = "0.09"
    unit_NGas_buy_param1.cinv1 = "0"
    unit_NGas_buy_param1.cinv2 = "0"
    unit_NGas_buy_param1.imp1 = "0"
    unit_NGas_buy_param1.imp2 = "0.045"
    unit_NGas_buy_param1.fmin = "0"
    unit_NGas_buy_param1.fmax = "100000"

    unit_NGas_buy_param2 = UnitParam()
    p2 = "P2"
    unit_NGas_buy_param2.cost1 = "0"
    unit_NGas_buy_param2.cost2 = "0.09"
    unit_NGas_buy_param2.cinv1 = "0"
    unit_NGas_buy_param2.cinv2 = "0"
    unit_NGas_buy_param2.imp1 = "0"
    unit_NGas_buy_param2.imp2 = "0.045"
    unit_NGas_buy_param2.fmin = "0"
    unit_NGas_buy_param2.fmax = "100000"
    unit_NGas_buy.add_unit_params(p1, unit_NGas_buy_param1)
    unit_NGas_buy.add_unit_params(p2, unit_NGas_buy_param2)

    ng_stream = Stream()
    ng_stream.name = layer_ng.name
    ng_stream.type = layer_ng.short_name
    ng_stream.is_heat = False
    ng_stream.unit = layer_ng.unit
    ng_stream.direction = "out"
    ng_stream.add_datas("P1", OtherStreamData('1'))
    ng_stream.add_datas("P2", OtherStreamData('1'))
    unit_NGas_buy.add_stream(ng_stream)

    return unit_NGas_buy


def get_unit_electricitybuy(layer_elec):
    unit_Electricity_buy = Unit()

    unit_Electricity_buy.unitname = "Electricity_buy"
    unit_Electricity_buy.type = "Utility"

    unit_Electricity_buy_param1 = UnitParam()
    p1 = "P1"
    unit_Electricity_buy_param1.cost1 = "0"
    unit_Electricity_buy_param1.cost2 = "0.05"
    unit_Electricity_buy_param1.cinv1 = "0"
    unit_Electricity_buy_param1.cinv2 = "0"
    unit_Electricity_buy_param1.imp1 = "0"
    unit_Electricity_buy_param1.imp2 = "0.086"
    unit_Electricity_buy_param1.fmin = "0"
    unit_Electricity_buy_param1.fmax = "100000"

    unit_Electricity_buy_param2 = UnitParam()
    p2 = "P2"
    unit_Electricity_buy_param2.cost1 = "0"
    unit_Electricity_buy_param2.cost2 = "0.03"
    unit_Electricity_buy_param2.cinv1 = "0"
    unit_Electricity_buy_param2.cinv2 = "0"
    unit_Electricity_buy_param2.imp1 = "0"
    unit_Electricity_buy_param2.imp2 = "0.046"
    unit_Electricity_buy_param2.fmin = "0"
    unit_Electricity_buy_param2.fmax = "100000"

    unit_Electricity_buy.add_unit_params(p1, unit_Electricity_buy_param1)
    unit_Electricity_buy.add_unit_params(p2, unit_Electricity_buy_param2)

    elec_stream = Stream()
    elec_stream.name = layer_elec.name
    elec_stream.type = layer_elec.short_name
    elec_stream.is_heat = False
    elec_stream.unit = layer_elec.unit
    elec_stream.direction = "out"
    elec_stream.add_datas("P1", OtherStreamData('1'))
    elec_stream.add_datas("P2", OtherStreamData('1'))
    unit_Electricity_buy.add_stream(elec_stream)

    return unit_Electricity_buy


class ModelsTests(unittest.TestCase):

    def setUp(self):
        self.et = Et("test")
        self.et.capex_weight_factor = '0.4'
        self.et.co2_tax = '0'

        layer_ng = Layer(name="NATURAL_GAS", display_name="Natural Gaz", short_name="ng", unit="kW")
        layer_elec = Layer(name="ELECTRICITY", display_name="Electricity", short_name="elec", unit="kW")
        self.et.add_layers(layer_ng)
        self.et.add_layers(layer_elec)

        self.et.units.append(get_unit_process(layer_ng))
        self.et.units.append(get_unit_hotutility(layer_elec))
        self.et.units.append(get_unit_coolingwater(layer_elec))
        self.et.units.append(get_unit_ngasbuy(layer_ng))
        self.et.units.append(get_unit_electricitybuy(layer_elec))

        self.project = Project()
        self.project.objective = 'TotalCost'
        self.project.name = 'test'
        self.project.elec_in = "0.1"
        self.project.elec_out = "0.2"

        period_key = []
        period_val = []

        period_key.append("P1")
        period_val.append("1000")
        period_key.append("P2")
        period_val.append("5000")

        self.project.period_keys = period_key
        self.project.period_values = period_val

        self.project.ets.append(self.et)

    def tearDown(self):
        pass

    def test_001_check_et_number_in_project(self):
        self.assertTrue(len(self.project.ets) == 1)

    def test_002_check_layers_in_et(self):
        self.assertTrue(len(self.project.ets[0].layers) == 2)
        self.assertTrue(self.project.ets[0].layers[0].short_name == 'ng')
        self.assertTrue(self.project.ets[0].layers[1].name == 'ELECTRICITY')
        self.assertFalse(self.project.ets[0].layers[0] == self.project.ets[0].layers[1])

    def test_003_check_units_in_et(self):
        self.assertTrue(len(self.project.ets[0].units) == 5)
        self.assertTrue(self.project.ets[0].units[0].unitname == 'process1')
        self.assertTrue(len(self.project.ets[0].units[0].unit_params) == 2)
        self.assertTrue(len(self.project.ets[0].units[0].streams) == 5)
        self.assertTrue(self.project.ets[0].units[0].contains_heat == True)

    def test_004_check_streams_in_unit(self):
        self.assertTrue((sum(map(lambda x: x.is_heat, self.project.ets[0].units[0].streams))) == 4)
        self.assertTrue((sum(map(lambda x: not x.is_heat, self.project.ets[0].units[0].streams))) == 1)
        self.assertTrue(self.project.ets[0].units[4].streams[0].direction == 'out')
        self.assertFalse(self.project.ets[0].units[4].streams[0].in_direction)
        self.assertTrue(self.project.ets[0].units[2].streams[0].in_direction)
        self.assertFalse(self.project.ets[0].units[2].streams[0].is_heat)
        self.assertTrue(self.project.ets[0].units[1].streams[1].is_heat)

    def test_005_check_constant_HeatStreamData(self):
        hs_data = self.project.ets[0].units[1].streams[1].datas['P1']
        self.assertTrue(self.project.ets[0].units[1].streams[1].name == 'S1')
        self.assertTrue(hs_data.tin == hs_data.tout)
        self.assertFalse(hs_data.hin == hs_data.hout)
        self.assertTrue(float(hs_data.hval) > 0)
        self.assertFalse(hs_data.hout == hs_data.hval)
        self.assertTrue(hs_data.is_heat_constant)
        self.assertFalse(hs_data.is_heating)

    def test_006_check_heating_HeatStreamData(self):
        hs_data = self.project.ets[0].units[2].streams[1].datas['P1']
        self.assertTrue(self.project.ets[0].units[2].streams[1].name == 'CW1')
        self.assertTrue(float(hs_data.tin) < float(hs_data.tout))
        self.assertTrue(float(hs_data.hin) < float(hs_data.hout))
        self.assertTrue(float(hs_data.hval) > 0)
        self.assertTrue(float(hs_data.hval) == float(hs_data.hout))
        self.assertFalse(hs_data.is_heat_constant)
        self.assertTrue(hs_data.is_heating)
        self.assertTrue(float(hs_data.dtmin_tin) < float(hs_data.tin))
        self.assertTrue(float(hs_data.dtmin_tout) < float(hs_data.tout))

    def test_006_check_cooling_HeatStreamData(self):
        hs_data = self.project.ets[0].units[0].streams[2].datas['P1']
        self.assertTrue(self.project.ets[0].units[0].streams[2].name == 'C2')
        self.assertTrue(float(hs_data.tin) > float(hs_data.tout))
        self.assertTrue(float(hs_data.hin) > float(hs_data.hout))
        self.assertTrue(float(hs_data.hval) > 0)
        self.assertTrue(float(hs_data.hin) == float(hs_data.hval))
        self.assertFalse(hs_data.is_heat_constant)
        self.assertFalse(hs_data.is_heating)
        self.assertTrue(float(hs_data.dtmin_tin) > float(hs_data.tin))
        self.assertTrue(float(hs_data.dtmin_tout) > float(hs_data.tout))


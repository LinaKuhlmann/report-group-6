# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

import filecmp
import os
import tempfile
import unittest

from pyxosmose.models.et import Et


from pyxosmose.tests.graph_utility import *
from pyxosmose.tests.rosmose_florez_utility import *
from pyxosmose.tests.rosmose_utility import *
from pyxosmose.rosmose import Rosmose


class GraphTests(unittest.TestCase):

    def setUp(self):
        self.ro = Rosmose()
        self.et = Et("test")
        self.et.capex_weight_factor = '0.4'
        self.et.co2_tax = '0'

        layer_ng = Layer(name="NATURAL_GAS", display_name="Natural Gaz", short_name="ng", unit="kW", color='green')
        layer_elec = Layer(name="ELECTRICITY", display_name="Electricity", short_name="elec", unit="kW", color='yellow')
        self.et.add_layers(layer_ng)
        self.et.add_layers(layer_elec)

        self.et.units.append(get_unit_process(layer_ng))
        self.et.units.append(get_unit_hotutility(layer_elec))
        self.et.units.append(get_unit_coolingwater(layer_elec))
        self.et.units.append(get_unit_ngasbuy(layer_ng))
        self.et.units.append(get_unit_electricitybuy(layer_elec))

    def tearDown(self):
        self.ro = None

    def test_001_graph_comparison(self):
        serializer = EtGraphSerializer(self.et, "P1")
        self.assertTrue(serializer.serialize() == get_graph_txt())

    def test_002_graph_display_only_used_layers(self):
        self.ro.retrieve_type(coolingtower_create_et())
        self.ro.retrieve_type(coolingtower_create_tags())
        self.ro.retrieve_type(coolingtower_create_calculated_params())
        self.ro.retrieve_type(coolingtower_create_layers())
        self.ro.retrieve_type(coolingtower_create_units())
        self.ro.retrieve_type(coolingtower_create_unit_param())
        self.ro.retrieve_type(coolingtower_create_rs())
        self.ro.retrieve_type(coolingtower_create_hs())
        coolingtower = self.ro.osmose_manager.get_et_by_name('coolingtower')
        serializer = EtGraphSerializer(coolingtower)
        self.assertTrue(serializer.serialize() == get_coolingtower_graph_txt())

    def test_003_graph_et1(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_units_for_et1())
        self.ro.retrieve_type(add_unit_param_for_past())
        self.ro.retrieve_type(add_heat_stream_for_past())
        self.ro.retrieve_type(add_unit_param_for_evap())
        self.ro.retrieve_type(add_heat_stream_for_evap())
        self.ro.retrieve_type(add_unit_param_for_masc())
        self.ro.retrieve_type(add_heat_stream_for_masc())
        self.ro.retrieve_type(add_unit_param_for_mozz())
        self.ro.retrieve_type(add_heat_stream_for_mozz())
        self.ro.retrieve_type(add_unit_param_for_cip())
        self.ro.retrieve_type(add_heat_stream_for_cip())
        self.ro.retrieve_type(add_unit_param_for_rive())
        self.ro.retrieve_type(add_heat_stream_for_rive())
        self.ro.retrieve_type(add_unit_param_for_hu())
        self.ro.retrieve_type(add_heat_stream_for_hu())
        self.ro.retrieve_type(add_resource_stream_for_hu())
        self.ro.retrieve_type(add_unit_param_for_cu())
        self.ro.retrieve_type(add_heat_stream_for_cu())
        et1 = self.ro.osmose_manager.get_et_by_name('et1')
        serializer = EtGraphSerializer(et1)
        graph = serializer.serialize()
        self.assertTrue(serializer.serialize() == get_et1_graph_txt())

    def test_004_graph_furnace(self):
        self.ro.retrieve_type(furnace_create_et())
        self.ro.retrieve_type(furnace_create_tags())
        self.ro.retrieve_type(furnace_create_calculated_params())
        self.ro.retrieve_type(furnace_create_layers())
        self.ro.retrieve_type(furnace_create_units())
        self.ro.retrieve_type(furnace_create_unit_param())
        self.ro.retrieve_type(furnace_create_rs())
        self.ro.retrieve_type(furnace_create_hs())
        furnace = self.ro.osmose_manager.get_et_by_name('furnace')
        serializer = EtGraphSerializer(furnace)
        graph = serializer.serialize()
        self.assertTrue(serializer.serialize() == get_furnace_graph_txt())

    def test_005_graph_market(self):
        self.ro.retrieve_type(market_create_et())
        self.ro.retrieve_type(market_create_tags())
        self.ro.retrieve_type(market_create_calculated_params())
        self.ro.retrieve_type(market_create_layers())
        self.ro.retrieve_type(market_create_units())
        self.ro.retrieve_type(market_create_unit_param_for_elecsell())
        self.ro.retrieve_type(market_create_rs_for_elecsell())
        self.ro.retrieve_type(market_create_unit_param_for_natgassell())
        self.ro.retrieve_type(market_create_rs_for_natgassell())
        self.ro.retrieve_type(market_create_unit_param_for_watersell())
        self.ro.retrieve_type(market_create_rs_for_watersell())
        self.ro.retrieve_type(market_create_unit_param_for_milkbuy())
        self.ro.retrieve_type(market_create_rs_for_milkbuy())
        self.ro.retrieve_type(market_create_unit_param_for_co2buy())
        self.ro.retrieve_type(market_create_rs_for_co2buy())
        market = self.ro.osmose_manager.get_et_by_name('market')
        serializer = EtGraphSerializer(market)
        graph = serializer.serialize()
        self.assertTrue(serializer.serialize() == get_market_graph_txt())

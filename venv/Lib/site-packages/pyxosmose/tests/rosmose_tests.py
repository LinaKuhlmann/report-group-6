# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

import filecmp
import os
import shutil
import unittest

from pyxosmose.rosmose import Rosmose
from pyxosmose.tests.rosmose_utility import *


class RosmoseTests(unittest.TestCase):

    def setUp(self):
        self.ro = Rosmose()

    def tearDown(self):
        self.ro = None

    def test_001_display_chunk_manager(self):
        display = self.ro.retrieve_type(create_et1_and_display())
        self.assertTrue(display[0])
        not_display = self.ro.retrieve_type(create_et1_and_not_display())
        self.assertFalse(not_display[0])
        comment = self.ro.retrieve_type(not_create_et1())
        self.assertFalse(comment)

    def test_002_create_et(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_et3())
        et1 = self.ro.osmose_manager.get_et_by_name("et1")
        self.assertTrue(et1.capex_weight_factor == "0.4")
        self.assertTrue(et1.co2_tax == "0")
        et3 = self.ro.osmose_manager.get_et_by_name('et3')
        self.assertTrue(et3 is not None)
        self.assertTrue(et3.capex_weight_factor == None)
        self.assertTrue(et3.co2_tax == None)

    def test_003_create_layers(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        et1 = self.ro.osmose_manager.get_et_by_name("et1")
        self.assertTrue(len(et1.layers) == 3)

    def test_004_update_et(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_et2())
        self.ro.retrieve_type(update_et1())
        et1 = self.ro.osmose_manager.get_et_by_name('et1')
        self.assertTrue(et1 is not None)
        et2 = self.ro.osmose_manager.get_et_by_name('et2')
        self.assertTrue(et2 is not None)
        self.assertTrue(et1.capex_weight_factor == "999")
        self.assertTrue(et1.co2_tax == "888")
        self.assertTrue(len(et1.layers) == 3)

        self.assertTrue(et2.capex_weight_factor == "1")
        self.assertTrue(et2.co2_tax == "2")

    def test_005_update_layers_in_et1(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_layers_for_et1_2())
        self.ro.retrieve_type(create_layers_for_et1_3())
        self.ro.retrieve_type(update_et1())
        et1 = self.ro.osmose_manager.get_et_by_name('et1')
        self.assertTrue(len(et1.layers) == 4)
        ng = next(x for x in et1.layers if x.name == "NATURAL_GAS")
        elec = next(x for x in et1.layers if x.name == "ELECTRICITY")
        water = next(x for x in et1.layers if x.name == "WATER")
        gasoil = next(x for x in et1.layers if x.name == "GASOIL")
        self.assertTrue(ng.color == "black")
        self.assertTrue(elec.color == "white")
        self.assertTrue(water.color == "lightblue")
        self.assertTrue(gasoil.display_name == "Gasoil")
        self.assertTrue(gasoil.short_name == "gasoil")
        self.assertTrue(gasoil.unit == "[dol/m3]")
        self.assertTrue(gasoil.color == "grey")

    def test_006_create_units(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_units_for_et1())
        et1 = self.ro.osmose_manager.get_et_by_name('et1')
        self.assertTrue(len(et1.units) == 8)
        processes = list(filter(lambda unit: unit.type == "Process", et1.units))
        utilities = list(filter(lambda unit: unit.type == "Utility", et1.units))
        self.assertTrue(len(processes) == 6)
        self.assertTrue(len(utilities) == 2)
        self.ro.retrieve_type(add_unit_param_for_past())
        self.ro.retrieve_type(add_heat_stream_for_past())
        self.ro.retrieve_type(add_unit_param_for_evap())
        self.ro.retrieve_type(add_heat_stream_for_evap())
        self.ro.retrieve_type(add_unit_param_for_masc())
        self.ro.retrieve_type(add_heat_stream_for_masc())
        self.ro.retrieve_type(add_unit_param_for_mozz())
        self.ro.retrieve_type(add_heat_stream_for_mozz())
        self.ro.retrieve_type(add_unit_param_for_cip())
        self.ro.retrieve_type(add_heat_stream_for_cip())
        self.ro.retrieve_type(add_unit_param_for_rive())
        self.ro.retrieve_type(add_heat_stream_for_rive())
        self.ro.retrieve_type(add_unit_param_for_hu())
        self.ro.retrieve_type(add_heat_stream_for_hu())
        self.ro.retrieve_type(add_resource_stream_for_hu())
        self.ro.retrieve_type(add_unit_param_for_cu())
        self.ro.retrieve_type(add_heat_stream_for_cu())
        self.ro.retrieve_type(update_et1())
        self.ro.retrieve_type(create_layers_for_et1_2())
        self.ro.retrieve_type(create_layers_for_et1_3())
        past = next(x for x in et1.units if x.unitname == "past")
        evap = next(x for x in et1.units if x.unitname == "evap")
        masc = next(x for x in et1.units if x.unitname == "masc")
        mozz = next(x for x in et1.units if x.unitname == "mozz")
        cip = next(x for x in et1.units if x.unitname == "cip")
        rive = next(x for x in et1.units if x.unitname == "rive")
        hu = next(x for x in et1.units if x.unitname == "hu")
        cu = next(x for x in et1.units if x.unitname == "cu")

        self.assertTrue(len(past.streams) == 7)
        self.assertTrue(len(evap.streams) == 14)
        self.assertTrue(len(masc.streams) == 3)
        self.assertTrue(len(mozz.streams) == 6)
        self.assertTrue(len(cip.streams) == 6)
        self.assertTrue(len(rive.streams) == 3)
        self.assertTrue(len(hu.streams) == 2)
        self.assertTrue(len(cu.streams) == 1)

        past_b = next(x for x in past.streams if x.name == "Past_b")
        crpast_b = next(x for x in past.streams if x.name == "crpast_b")
        e14b = next(x for x in evap.streams if x.name == "e14b")
        s1 = next(x for x in hu.streams if x.name == "s1")
        natgas = next(x for x in hu.streams if x.name == "NATURAL_GAS")

        self.assertTrue(past_b.datas["default"].hin == "2090.95")
        self.assertTrue(past_b.datas["default"].dtmin == "2.5")
        self.assertTrue(past_b.datas["default"].dtmin_tin == "77.5")
        self.assertTrue(past_b.datas["default"].dtmin_tout == "6.5")
        self.assertFalse(past_b.datas["default"].is_heating)

        self.assertTrue(crpast_b.datas["default"].tin == "75")
        self.assertTrue(crpast_b.datas["default"].alpha == "1")
        self.assertFalse(crpast_b.datas["default"].is_heat_constant)

        self.assertTrue(e14b.datas["default"].tout == "70")
        self.assertTrue(e14b.datas["default"].hout == "2333.8")
        self.assertTrue(e14b.datas["default"].hval == "2333.8")
        self.assertTrue(e14b.datas["default"].temperature_unit == "C")

        self.assertTrue(s1.datas["default"].hin == "1000")
        self.assertTrue(s1.datas["default"].hout == "0")
        self.assertTrue(natgas.datas["default"].value == "1111.1111")
        self.assertTrue(natgas.direction == "in")
        self.assertTrue(natgas.in_direction)

    def test_007_update_units(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_units_for_et1())
        et1 = self.ro.osmose_manager.get_et_by_name('et1')
        self.assertTrue(len(et1.units) == 8)
        processes = list(filter(lambda unit: unit.type == "Process", et1.units))
        utilities = list(filter(lambda unit: unit.type == "Utility", et1.units))
        self.assertTrue(len(processes) == 6)
        self.assertTrue(len(utilities) == 2)
        self.ro.retrieve_type(add_unit_param_for_past())
        self.ro.retrieve_type(add_heat_stream_for_past())
        self.ro.retrieve_type(add_unit_param_for_evap())
        self.ro.retrieve_type(add_heat_stream_for_evap())
        self.ro.retrieve_type(add_unit_param_for_masc())
        self.ro.retrieve_type(add_heat_stream_for_masc())
        self.ro.retrieve_type(add_unit_param_for_mozz())
        self.ro.retrieve_type(add_heat_stream_for_mozz())
        self.ro.retrieve_type(add_unit_param_for_cip())
        self.ro.retrieve_type(add_heat_stream_for_cip())
        self.ro.retrieve_type(add_unit_param_for_rive())
        self.ro.retrieve_type(add_heat_stream_for_rive())
        self.ro.retrieve_type(add_unit_param_for_hu())
        self.ro.retrieve_type(add_heat_stream_for_hu())
        self.ro.retrieve_type(add_resource_stream_for_hu())
        self.ro.retrieve_type(add_unit_param_for_cu())
        self.ro.retrieve_type(add_heat_stream_for_cu())
        self.ro.retrieve_type(update_et1())
        self.ro.retrieve_type(create_layers_for_et1_2())
        self.ro.retrieve_type(create_layers_for_et1_3())
        past = next(x for x in et1.units if x.unitname == "past")
        evap = next(x for x in et1.units if x.unitname == "evap")
        masc = next(x for x in et1.units if x.unitname == "masc")
        mozz = next(x for x in et1.units if x.unitname == "mozz")
        cip = next(x for x in et1.units if x.unitname == "cip")
        rive = next(x for x in et1.units if x.unitname == "rive")
        hu = next(x for x in et1.units if x.unitname == "hu")
        cu = next(x for x in et1.units if x.unitname == "cu")

        self.assertTrue(len(past.streams) == 7)
        self.assertTrue(len(evap.streams) == 14)
        self.assertTrue(len(masc.streams) == 3)
        self.assertTrue(len(mozz.streams) == 6)
        self.assertTrue(len(cip.streams) == 6)
        self.assertTrue(len(rive.streams) == 3)
        self.assertTrue(len(hu.streams) == 2)
        self.assertTrue(len(cu.streams) == 1)

        past_b = next(x for x in past.streams if x.name == "Past_b")
        crpast_b = next(x for x in past.streams if x.name == "crpast_b")
        e14b = next(x for x in evap.streams if x.name == "e14b")
        s1 = next(x for x in hu.streams if x.name == "s1")
        natgas = next(x for x in hu.streams if x.name == "NATURAL_GAS")

        self.assertTrue(past_b.datas["default"].hin == "2090.95")
        self.assertTrue(past_b.datas["default"].dtmin == "2.5")
        self.assertTrue(past_b.datas["default"].dtmin_tin == "77.5")
        self.assertTrue(past_b.datas["default"].dtmin_tout == "6.5")
        self.assertFalse(past_b.datas["default"].is_heating)

        self.assertTrue(crpast_b.datas["default"].tin == "75")
        self.assertTrue(crpast_b.datas["default"].alpha == "1")
        self.assertFalse(crpast_b.datas["default"].is_heat_constant)

        self.assertTrue(e14b.datas["default"].tout == "70")
        self.assertTrue(e14b.datas["default"].hout == "2333.8")
        self.assertTrue(e14b.datas["default"].hval == "2333.8")
        self.assertTrue(e14b.datas["default"].temperature_unit == "C")

        self.assertTrue(s1.datas["default"].hin == "1000")
        self.assertTrue(s1.datas["default"].hout == "0")
        self.assertTrue(natgas.datas["default"].value == "1111.1111")
        self.assertTrue(natgas.direction == "in")
        self.assertTrue(natgas.in_direction)

        self.ro.retrieve_type(update_units_for_et1())
        processes = list(filter(lambda unit: unit.type == "Process", et1.units))
        utilities = list(filter(lambda unit: unit.type == "Utility", et1.units))

        self.assertTrue(len(et1.units) == 4)
        self.assertTrue(len(processes) == 2)
        self.assertTrue(len(utilities) == 2)

        past = next(x for x in et1.units if x.unitname == "past")
        evap = next(x for x in et1.units if x.unitname == "evap")
        hu = next(x for x in et1.units if x.unitname == "hu")
        cu = next(x for x in et1.units if x.unitname == "cu")
        self.assertTrue(len(past.streams) == 7)
        self.assertTrue(len(evap.streams) == 14)

        past_b = next(x for x in past.streams if x.name == "Past_b")
        crpast_b = next(x for x in past.streams if x.name == "crpast_b")
        e14b = next(x for x in evap.streams if x.name == "e14b")
        s1 = next(x for x in hu.streams if x.name == "s1")
        natgas = next(x for x in hu.streams if x.name == "NATURAL_GAS")

        self.assertTrue(past_b.datas["default"].hin == "2090.95")
        self.assertTrue(past_b.datas["default"].dtmin == "2.5")
        self.assertTrue(past_b.datas["default"].dtmin_tin == "77.5")
        self.assertTrue(past_b.datas["default"].dtmin_tout == "6.5")
        self.assertFalse(past_b.datas["default"].is_heating)

        self.assertTrue(crpast_b.datas["default"].tin == "75")
        self.assertTrue(crpast_b.datas["default"].alpha == "1")
        self.assertFalse(crpast_b.datas["default"].is_heat_constant)

        self.assertTrue(e14b.datas["default"].tout == "70")
        self.assertTrue(e14b.datas["default"].hout == "2333.8")
        self.assertTrue(e14b.datas["default"].hval == "2333.8")
        self.assertTrue(e14b.datas["default"].temperature_unit == "C")

        self.assertTrue(s1.datas["default"].hin == "1000")
        self.assertTrue(s1.datas["default"].hout == "0")
        self.assertTrue(natgas.datas["default"].value == "1111.1111")
        self.assertTrue(natgas.direction == "in")
        self.assertTrue(natgas.in_direction)

    def test_008_update_units_params_and_streams_values(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_units_for_et1())
        et1 = self.ro.osmose_manager.get_et_by_name('et1')
        self.ro.retrieve_type(add_unit_param_for_past())
        self.ro.retrieve_type(add_heat_stream_for_past())
        self.ro.retrieve_type(add_unit_param_for_evap())
        self.ro.retrieve_type(add_heat_stream_for_evap())
        self.ro.retrieve_type(add_unit_param_for_masc())
        self.ro.retrieve_type(add_heat_stream_for_masc())
        self.ro.retrieve_type(add_unit_param_for_mozz())
        self.ro.retrieve_type(add_heat_stream_for_mozz())
        self.ro.retrieve_type(add_unit_param_for_cip())
        self.ro.retrieve_type(add_heat_stream_for_cip())
        self.ro.retrieve_type(add_unit_param_for_rive())
        self.ro.retrieve_type(add_heat_stream_for_rive())
        self.ro.retrieve_type(add_unit_param_for_hu())
        self.ro.retrieve_type(add_heat_stream_for_hu())
        self.ro.retrieve_type(add_resource_stream_for_hu())
        self.ro.retrieve_type(add_unit_param_for_cu())
        self.ro.retrieve_type(add_heat_stream_for_cu())

        hu = next(x for x in et1.units if x.unitname == "hu")

        self.assertTrue(len(hu.streams) == 2)

        s1 = next(x for x in hu.streams if x.name == "s1")
        natgas = next(x for x in hu.streams if x.name == "NATURAL_GAS")

        self.assertTrue(hu.unit_params['default'].cinv1 == "0")
        self.assertTrue(s1.datas["default"].hin == "1000")
        self.assertTrue(s1.datas["default"].hout == "0")
        self.assertTrue(natgas.datas["default"].value == "1111.1111")
        self.assertTrue(natgas.direction == "in")
        self.assertTrue(natgas.in_direction)

        self.ro.retrieve_type(update_unit_param_for_hu())
        self.ro.retrieve_type(update_heat_stream_for_hu())
        self.ro.retrieve_type(update_resource_stream_for_hu())
        self.assertTrue(hu.unit_params['default'].cinv1 == "1000")
        self.assertTrue(s1.datas["default"].tin == "9999")
        self.assertTrue(natgas.datas["default"].value == "8888.88")

    def test_009_frontend_serialization(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_et3())
        self.ro.retrieve_type(serialize_project())
        expected_frontend = os.path.join(os.path.dirname(__file__), "test_files", "frontend.lua")
        expected_opdata = os.path.join(os.path.dirname(__file__), "test_files", "operating_data.csv")
        output_frontend = os.path.join("./temp", "projects", "frontend.lua")
        output_opdata = os.path.join("./temp", "projects", "operating_data.csv")
        self.assertTrue(filecmp.cmp(expected_frontend, output_frontend))
        self.assertTrue(filecmp.cmp(expected_opdata, output_opdata))
        shutil.rmtree("./temp")

    def test_009_frontend_serialization_with_mathProg(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_et3())
        self.ro.retrieve_type(create_options())
        self.ro.retrieve_type(serialize_project())
        expected_frontend = os.path.join(os.path.dirname(__file__), "test_files", "frontend_with_mathProg.lua")
        output_frontend = os.path.join("./temp", "projects", "frontend.lua")
        self.assertTrue(filecmp.cmp(expected_frontend, output_frontend))
        shutil.rmtree("./temp")

    def test_010_ets_serialization(self):
        self.ro.retrieve_type(create_et1_and_display())
        self.ro.retrieve_type(create_et3())
        et1 = self.ro.osmose_manager.get_et_by_name("et1")
        et3 = self.ro.osmose_manager.get_et_by_name("et3")
        self.ro.retrieve_type(create_layers_for_et1())
        self.ro.retrieve_type(create_small_units_for_et1())
        self.ro.retrieve_type(create_small_units_for_et3())
        self.ro.retrieve_type(add_unit_param_for_evap())
        self.ro.retrieve_type(add_heat_stream_for_evap())
        self.ro.retrieve_type(add_unit_param_for_hu())
        self.ro.retrieve_type(add_heat_stream_for_hu())
        self.ro.retrieve_type(add_resource_stream_for_hu())
        self.ro.retrieve_type(add_unit_param_for_past())
        self.ro.retrieve_type(add_heat_stream_for_past())
        self.ro.retrieve_type(add_unit_param_for_cu())
        self.ro.retrieve_type(add_heat_stream_for_cu())
        self.ro.retrieve_type(serialize_et1_et3_lua())
        expected_ET1 = os.path.join(os.path.dirname(__file__), "test_files", "et1.lua")
        expected_ET3 = os.path.join(os.path.dirname(__file__), "test_files", "et3.lua")
        output_ET1 = os.path.join("./temp", "ET", "et1.lua")
        output_ET3 = os.path.join("./temp", "ET", "et3.lua")
        self.assertTrue(filecmp.cmp(expected_ET1, output_ET1))
        self.assertTrue(filecmp.cmp(expected_ET3, output_ET3))
        shutil.rmtree("./temp")

    # def test_debug_solve_project(self):
    #     self.ro.retrieve_type(create_et1_and_display())
    #     self.ro.retrieve_type(create_layers_for_et1())
    #     self.ro.retrieve_type(create_units_for_et1())
    #     self.ro.retrieve_type(add_unit_param_for_past())
    #     self.ro.retrieve_type(add_heat_stream_for_past())
    #     self.ro.retrieve_type(add_unit_param_for_evap())
    #     self.ro.retrieve_type(add_heat_stream_for_evap())
    #     self.ro.retrieve_type(add_unit_param_for_masc())
    #     self.ro.retrieve_type(add_heat_stream_for_masc())
    #     self.ro.retrieve_type(add_unit_param_for_mozz())
    #     self.ro.retrieve_type(add_heat_stream_for_mozz())
    #     self.ro.retrieve_type(add_unit_param_for_cip())
    #     self.ro.retrieve_type(add_heat_stream_for_cip())
    #     self.ro.retrieve_type(add_unit_param_for_rive())
    #     self.ro.retrieve_type(add_heat_stream_for_rive())
    #     self.ro.retrieve_type(add_unit_param_for_hu())
    #     self.ro.retrieve_type(add_heat_stream_for_hu())
    #     self.ro.retrieve_type(add_resource_stream_for_hu())
    #     self.ro.retrieve_type(add_unit_param_for_cu())
    #     self.ro.retrieve_type(add_heat_stream_for_cu())
    #
    #     self.ro.retrieve_type(coolingtower_create_et())
    #     self.ro.retrieve_type(coolingtower_create_tags())
    #     self.ro.retrieve_type(coolingtower_create_calculated_params())
    #     self.ro.retrieve_type(coolingtower_create_layers())
    #     self.ro.retrieve_type(coolingtower_create_units())
    #     self.ro.retrieve_type(coolingtower_create_unit_param())
    #     self.ro.retrieve_type(coolingtower_create_rs())
    #     self.ro.retrieve_type(coolingtower_create_hs())
    #
    #     self.ro.retrieve_type(furnace_create_et())
    #     self.ro.retrieve_type(furnace_create_tags())
    #     self.ro.retrieve_type(furnace_create_calculated_params())
    #     self.ro.retrieve_type(furnace_create_layers())
    #     self.ro.retrieve_type(furnace_create_units())
    #     self.ro.retrieve_type(furnace_create_unit_param())
    #     self.ro.retrieve_type(furnace_create_rs())
    #     self.ro.retrieve_type(furnace_create_hs())
    #
    #     self.ro.retrieve_type(heatpump_create_et())
    #     self.ro.retrieve_type(heatpump_create_tags())
    #     self.ro.retrieve_type(heatpump_create_calculated_params())
    #     self.ro.retrieve_type(heatpump_create_layers())
    #     self.ro.retrieve_type(heatpump_create_units())
    #     self.ro.retrieve_type(heatpump_create_unit_param())
    #     self.ro.retrieve_type(heatpump_create_rs())
    #     self.ro.retrieve_type(heatpump_create_hs())
    #
    #     self.ro.retrieve_type(market_create_et())
    #     self.ro.retrieve_type(market_create_tags())
    #     self.ro.retrieve_type(market_create_calculated_params())
    #     self.ro.retrieve_type(market_create_layers())
    #     self.ro.retrieve_type(market_create_units())
    #     self.ro.retrieve_type(market_create_unit_param_for_elecsell())
    #     self.ro.retrieve_type(market_create_rs_for_elecsell())
    #     self.ro.retrieve_type(market_create_unit_param_for_natgassell())
    #     self.ro.retrieve_type(market_create_rs_for_natgassell())
    #     self.ro.retrieve_type(market_create_unit_param_for_watersell())
    #     self.ro.retrieve_type(market_create_rs_for_watersell())
    #     self.ro.retrieve_type(market_create_unit_param_for_milkbuy())
    #     self.ro.retrieve_type(market_create_rs_for_milkbuy())
    #     self.ro.retrieve_type(market_create_unit_param_for_co2buy())
    #     self.ro.retrieve_type(market_create_rs_for_co2buy())
    #
    #     self.ro.retrieve_type(refrigerator_create_et())
    #     self.ro.retrieve_type(refrigerator_create_tags())
    #     self.ro.retrieve_type(refrigerator_create_calculated_params())
    #     self.ro.retrieve_type(refrigerator_create_layers())
    #     self.ro.retrieve_type(refrigerator_create_units())
    #     self.ro.retrieve_type(refrigerator_create_unit_param())
    #     self.ro.retrieve_type(refrigerator_create_rs())
    #     self.ro.retrieve_type(refrigerator_create_hs())
    #
    #     self.ro.retrieve_type(local_solve_project())

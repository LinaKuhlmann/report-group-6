def coolingtower_create_et():
    return ": OSMOSE ET coolingtower"


def coolingtower_create_tags():
    return """Cool_Tin = 15 [C] # Cooling tower temperature inlet
Cool_Tout = 25 [C] # Cooling tower temperature outlet
Cool_Qmax = 1000 [kW] # Cooling tower reference heat load
Cool_Elec = 0.021 [kW/kW] # Cooling Tower electricity input kWel/kWth
dtmin_liq = 5 [C] # Cooling tower reference heat load
test = 6.6
"""


def coolingtower_create_calculated_params():
    return "E_ref_CT = %Cool_Elec% * %Cool_Qmax% [kW] # Electricity consumption"


def coolingtower_create_layers():
    return """: OSMOSE LAYERS coolingtower

| Layer     | Display name | shortname | Unit | Color |
|:----------|:-------------|:----------|:-----|:------|
|ELECTRICITY|Electricity   |elec       |kWh   |yellow |
"""


def coolingtower_create_units():
    return """: OSMOSE UNIT coolingtower

| unit name |type   |
|:----------|:------|
| CoolTower |Utility|
"""


def coolingtower_create_unit_param():
    return """: OSMOSE UNIT_PARAM CoolTower

|cost1  |cost2  |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:------|:------|:------|:------|:------|:------|:------|
|0      |0      |0      |0      |0      |0      |1      |100    |
"""


def coolingtower_create_rs():
    return """: OSMOSE RESOURCE_STREAMS CoolTower

|layer      |direction|value                |
|:----------|:--------|:--------------------|
|ELECTRICITY| in      |%E_ref_CT%           |
"""


def coolingtower_create_hs():
    return """: OSMOSE HEAT_STREAMS CoolTower

|name           |Tin        |Tout       |Hin |Hout          |DT min/2       |alpha  |
|:--------------|:----------|:----------|:---|:-------------|:--------------|:------|
|cooltowerheat  |%Cool_Tin% |%Cool_Tout%| 0  | %Cool_Qmax%  | %dtmin_liq%   |1      |
"""


def furnace_create_et():
    return ": OSMOSE ET furnace"


def furnace_create_tags():
    return """Tad = 2025 [C] # Adiabatic flame temperature of the fuel 
dtmin_radiation = 2 [C] # radiation delta t mininum
dtmin_convection = 15 [C] # convection delta t mininum
To = 25 [C] # Tamb = To = Tchemicalreference
Trad= 1050 [C] # Radiation temperature threshold
Tstack = 100 [C] # Stack temperature threshold for no dew point
MWair = 29 [kg/kmol] # Molecular weight of dry air = 79% N2 + 21% O2
MWfuel = 16 [kg/kmol] # Molecular weight of methane
losses = 0.03 [-] # Furnace losses
LHV = 50000 [kJ/kg] # natural gas LHV @ 25°C,1 bar
molratst = 9.52 [kmol/kmol] # Stoich molar air to fuel ratio
a = 1.02 [-] # excess air as in CH4 + a*2(O2+3.76N2) 
cpair = 1.012 [kJ/kg/K] # Air heat capacity @400°C,1bar
cpng = 2.304 [kJ/kg/K] # Methane heat capacity @530°C,1bar
Tprin = 26 [C] # Preheating temperature
Furnace_natGas_LOAD = 1000 [kW] # Reference furnace load 
"""


def furnace_create_calculated_params():
    return """v = %molratst% * %MWair% / %MWfuel% [kg/kg] # stoich air to fuel mass ratio
cpg = %Furnace_natGas_LOAD% / (%Tad% - %To%) [kJ/kg/K] # Flue gases heat capacity @1bar
Tad_corr = %To% + (%Furnace_natGas_LOAD% / (%cpg% + (%cpair% * (%a% -1) * %v% * %Furnace_natGas_LOAD% / %LHV%))) [C] # Corrected adiabatic flame temperature
cpg_corr = %Furnace_natGas_LOAD% / (%Tad_corr% - %To%) [kJ/kg/K] # Corrected flue gases heat capacity @1bar 
Q_rad_gross = (%Furnace_natGas_LOAD% * (%Tad_corr% - %Trad%) / (%Tad_corr% - %To%)) [kW] # Heat flow rate at the radiation threshold temperature
Q_conv_gross = %Furnace_natGas_LOAD% * (%Trad% - %Tstack%) / (%Tad_corr% - %To%) [kW] # Heat flow rate at the convection threshold temperature 
Q_preh = %cpair% * %v% * %Furnace_natGas_LOAD% / %LHV% * (%Tprin% - %To%) [kW] # Air preheating load
Q_stack = %cpg_corr% * (%Tstack% - %To%) [kW] # Stack losses
Q_radpreh = %Q_preh% + %Q_rad_gross% [kW] # Preheating load added to the highest temperature
Q_demand = %Furnace_natGas_LOAD% / (1-%losses%) [kW] # Total energy consumption by the furnace
"""


def furnace_create_layers():
    return """: OSMOSE LAYERS furnace

| Layer         | Display name | shortname | Unit | Color |
|:--------------|:-------------|:----------|:-----|:------|
| NATURAL_GAS   | Gas buy      | ng        | kW   | green |
"""


def furnace_create_units():
    return """: OSMOSE UNIT furnace
|unit name  |type   |
|:----------|:------|
|Furnace    |Utility|
"""


def furnace_create_unit_param():
    return """: OSMOSE UNIT_PARAM Furnace

|cost1  |cost2  |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:------|:------|:------|:------|:------|:------|:------|
|0      |0      |0      |0      |0      |0      |1      |400    |
"""


def furnace_create_rs():
    return """# OSMOSE RESOURCE_STREAMS Furnace

|layer      |direction|value                |
|:----------|:--------|:--------------------|
|NATURAL_GAS| in      |%Q_demand%           |
"""


def furnace_create_hs():
    return """: OSMOSE HEAT_STREAMS Furnace

|name       |Tin   |Tout    |Hin            |Hout               |DT min/2           |alpha|
|:----------|:-----|:-------|:--------------|:------------------|:------------------|:----|
|radiation  |%Trad%|%Trad%  |%Q_radpreh%    |0                  |%dtmin_radiation%  |1    |
|convection |%Trad%|%Tstack%|%Q_conv_gross% |0                  |%dtmin_convection% |1    |
|preheating |%To%  |%Tprin% |0              |%Q_preh%           |%dtmin_convection% |1    |
"""


def heatpump_create_et():
    return ": OSMOSE ET heatpump"


def heatpump_create_tags():
    return """Evap_Tin = 95 [C] # Evaporator temperature inlet
Evap_Tout = 95 [C] # Evaporator temperature outlet
Cond_Tin = 130 [C] # Condenser temperature inlet
Cond_Tout = 130 [C] # Condenser temperature outlet
Cond_Qmax = 6000 [kW] # Condenser reference heat flow rate
exeff = 0.5 [-] # Second law efficiency
dtmin_2ph = 2 [C] # phase-change delta t mininum
"""


def heatpump_create_calculated_params():
    return """COPcarnot = (%Cond_Tin% + 273) / (%Cond_Tin% - %Evap_Tin%) [-] # Carnot COP 
COP = %exeff% * %COPcarnot% [-] # Actual COP
W_heatpump = %Cond_Qmax% / %COP% [kW] # Heat pump power consumption
Evap_Qmax = %Cond_Qmax% * (%COP% - 1) / %COP% [kW] # Evaporator heat flow rate
"""


def heatpump_create_layers():
    return """: OSMOSE LAYERS heatpump

|Layer      |Display name|shortname |Unit   |Color  |
|:----------|:-----------|:---------|:------|:------|
|ELECTRICITY|Electricity |elec      |kW     |yellow |
"""


def heatpump_create_units():
    return """: OSMOSE UNIT heatpump

|unit name  |type     |
|:----------|:--------|
|HeatPump   |Utility  |
"""


def heatpump_create_unit_param():
    return """: OSMOSE UNIT_PARAM HeatPump

|cost1  |cost2  |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:------|:------|:------|:------|:------|:------|:------|
|0      |0      |0      |0      |0      |0      |1      |10     |
"""


def heatpump_create_rs():
    return """: OSMOSE RESOURCE_STREAMS HeatPump

|layer      |direction|value                |
|:----------|:--------|:--------------------|
|ELECTRICITY| in      |%W_heatpump%         |
"""


def heatpump_create_hs():
    return """: OSMOSE HEAT_STREAMS HeatPump

|name           |Tin        |Tout       |Hin        |Hout       |DT min/2   |alpha|
|:--------------|:----------|:----------|:----------|:----------|:----------|:----|
|evaporation    |%Evap_Tin% |%Evap_Tout%|0          |%Evap_Qmax%|%dtmin_2ph%|1    |
|condensation   |%Cond_Tin% |%Cond_Tout%|%Cond_Qmax%|0          |%dtmin_2ph%|1    |
"""


def market_create_et():
    return ": OSMOSE ET market"


def market_create_tags():
    return """water_cost = 3.69 [Euro/m^3] # Water price
CW_ref_VOLF = 1000 [m^3/h] # Reference capacity of water supply
elec_cost = 0.07 [Euro/kWh] # price of electricity 
ELEC_ref_POWER = 1000 [kW] # Reference capacity of electricity supply
natgas_cost = 0.032 [Euro/kWh] # price of natural gas 
NATGAS_ref_LOAD = 1000 [kW] #Reference capacity of natural gas supply
dioxidecapt_cost = 0.0084 [Euro/kg] # price of CO2 sold to the market
CO2capt_ref_LOAD = 1000 [kg/h] # #Reference capacity of CO2 marketable
dioxidetax_cost = 0 [Euro/t] # # Tax of CO2 emitted to the market
CO2taxed_ref_LOAD = 1000 [kg/h] # Reference capacity of CO2 emitted
milk_price = 500 [Euro/m^3] # Average price of milk paid to farmers
MILK_ref_LOAD = 1000 [m3] # Reference capacity of milk production
I_CO2fuel = 2.75 [kg/kg] # Methane direct CO2 emissions factor kgCO2/kg/CH4
r_CO2fuel = 0.0049 [g/kJ] # Methane indirect CO2 emission factor in gCO2/kJCH4
r_CO2ee = 62.63 [g/kWh] # Electricity indirect CO2 emission factor in gCO2/kWh
LHV = 47000 [kJ/kg] # Lower heating value of methane
"""


def market_create_calculated_params():
    return """CW_COST = %water_cost% * %CW_ref_VOLF% [Euro/h] # Reference cost of water supply
CW_COST_BUY = -1 * %CW_COST% *  0.7 [Euro/h] # Assume a factor of 30% for the waste water treatment costs. It can be computed as well assuming the operating costs of a WWT plant
ELEC_SELL_COST = %elec_cost% * %ELEC_ref_POWER% [Euro/h] # Reference cost of electricity supply 
NATGAS_COST = %natgas_cost% * %NATGAS_ref_LOAD% [Euro/h] # Reference cost of natural gas supply 
ELEC_BUY_COST = -1 * %ELEC_SELL_COST% * 0.7 [Euro/h] # Reference cost of electricity sold by the process to the market, although less attractive to avoid the engine over sizing
CO2_BUY_COST = -1 * %dioxidecapt_cost% * %CO2capt_ref_LOAD% [Euro/h] # Reference cost of CO2 sold by the process to the market
CO2_TAX_COST = %dioxidetax_cost% / 1000 * %CO2taxed_ref_LOAD% [Euro/h] # Reference tax of CO2 due to emissions to atmosphere
MILK_BUY_COST = -1* %milk_price% * %MILK_ref_LOAD% [Euro/h] # Reference price of milk sold by the process to the market
TotalEmittedNG = %I_CO2fuel% * %NATGAS_ref_LOAD% / %LHV% * 3600 + %r_CO2fuel% * %NATGAS_ref_LOAD% *3600 / 1000 [kg/h] # Total flow rate of CO2 emissions from natural gas
IndEmittedNG = %r_CO2fuel% * %NATGAS_ref_LOAD% * 3600 / 1000 [kg/h] # Indirect flow rate of CO2 emissions from natural gas
IndEmittedEE = %r_CO2ee% * %ELEC_ref_POWER% / 1000 [kg/h] # Indirect flow rate of CO2 emissions from electricity
"""


def market_create_layers():
    return """: OSMOSE LAYERS market

|Layer      |Display name       |shortname  |Unit   |Color  |
|:----------|:------------------|:----------|:------|:------|
|ELECTRICITY|Electricity Sell   |elec       |kWh    |yellow |
|NATURAL_GAS|NatGas Sell        |ng         |kW     |green  |
|WATER      |Water Sell         |water      |m^3/h  |blue   |
|MILK       |Milk buy           |milk       |m^3/h  |white  |
|CO2_MARKET |CO2 buy            |dioxmarket |kg/h   |grey   |
"""


def market_create_units():
    return """: OSMOSE UNIT market

|unit name  |type   |
|:----------|:------|
|ElecSell   |Utility|
|NatgasSell |Utility|
|WaterSell  |Utility|
|MilkBuy    |Utility|
|CO2Buy     |Utility|
"""


def market_create_unit_param_for_elecsell():
    return """: OSMOSE UNIT_PARAM ElecSell

|cost1  |cost2              |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:------------------|:------|:------|:------|:------|:------|:------|
|0      |%ELEC_SELL_COST%   |0      |0      |0      |0      |1      |1000   |
"""


def market_create_rs_for_elecsell():
    return """: OSMOSE RESOURCE_STREAMS ElecSell

|layer      |direction|value                |
|:----------|:--------|:--------------------|
|ELECTRICITY| out     |%ELEC_ref_POWER%     |
"""


def market_create_unit_param_for_natgassell():
    return """: OSMOSE UNIT_PARAM NatgasSell

|cost1  |cost2          |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:--------------|:------|:------|:------|:------|:------|:------|
|0      |%NATGAS_COST%  |0      |0      |0      |0      |1      |1000   |
"""


def market_create_rs_for_natgassell():
    return """: OSMOSE RESOURCE_STREAMS NatgasSell

|layer      |direction|value                |
|:----------|:--------|:--------------------|
|NATURAL_GAS|out      |%NATGAS_ref_LOAD%    |
"""


def market_create_unit_param_for_watersell():
    return """: OSMOSE UNIT_PARAM WaterSell

|cost1  |cost2      |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:----------|:------|:------|:------|:------|:------|:------|
|0      |%CW_COST%  |0      |0      |0      |0      |1      |10000  |
"""


def market_create_rs_for_watersell():
    return """: OSMOSE RESOURCE_STREAMS WaterSell

|layer|direction|value          |
|:----|:--------|:--------------|
|WATER|out      |%CW_ref_VOLF%  |
"""


def market_create_unit_param_for_milkbuy():
    return """: OSMOSE UNIT_PARAM MilkBuy

|cost1  |cost2          |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:--------------|:------|:------|:------|:------|:------|:------|
|0      |%MILK_BUY_COST%|0      |0      |0      |0      |1      |10000  |
"""


def market_create_rs_for_milkbuy():
    return """: OSMOSE RESOURCE_STREAMS MilkBuy

|layer  |direction  |value              |
|:------|:----------|:------------------|
|MILK   |in         |%MILK_ref_LOAD%    |
"""


def market_create_unit_param_for_co2buy():
    return """: OSMOSE UNIT_PARAM CO2Buy

|cost1  |cost2          |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:--------------|:------|:------|:------|:------|:------|:------|
|0      |%CO2_BUY_COST% |0      |0      |0      |0      |1      |10000  |
"""


def market_create_rs_for_co2buy():
    return """: OSMOSE RESOURCE_STREAMS CO2Buy

|layer      |direction  |value              |
|:----------|:----------|:------------------|
|CO2_MARKET |in         |%CO2capt_ref_LOAD% |
"""


def refrigerator_create_et():
    return ": OSMOSE ET refrigerator"


def refrigerator_create_tags():
    return """Evap_Tin = -30 [C] # Evaporator temperature inlet
Evap_Tout = -30 [C] # Evaporator temperature outlet
Cond_Tin = 40 [C] # Condenser temperature inlet
Cond_Tout = 40 [C] # Condenser temperature outlet
Evap_Qmax = 6000 [kW] # Evaporator reference heat flow rate
exeff = 0.45 [-] # Second law efficiency
dtmin_2ph = 2 [C] # phase-change delta t mininum
"""


def refrigerator_create_calculated_params():
    return """COPcarnot = (%Evap_Tin% + 273) / (%Cond_Tin% - %Evap_Tin%) [-] # Carnot COP 
COP = %exeff% * %COPcarnot% [-] # Actual COP
W_refrig = %Evap_Qmax% / %COP% [kW] # Heat pump power consumption
Cond_Qmax = %Evap_Qmax% * (%COP% + 1) / %COP% [kW] # Condenser heat flow rate
"""


def refrigerator_create_layers():
    return """: OSMOSE LAYERS refrigerator

|Layer      |Display name|shortname|Unit    |Color  |
|:----------|:-----------|:--------|:-------|:------|
|ELECTRICITY|Electricity |elec     |kW      |blue   |
"""


def refrigerator_create_units():
    return """: OSMOSE UNIT refrigerator

|unit name      |type   |
|:--------------|:------|
|Refrigerator   |Utility|
"""


def refrigerator_create_unit_param():
    return """: OSMOSE UNIT_PARAM Refrigerator

|cost1  |cost2  |cinv1  |cinv2  |imp1   |imp2   |fmin   |fmax   |
|:------|:------|:------|:------|:------|:------|:------|:------|
|0      |0      |0      |0      |0      |0      |1      |10     |
"""


def refrigerator_create_rs():
    return """: OSMOSE RESOURCE_STREAMS Refrigerator

|layer      |direction|value                |
|:----------|:--------|:--------------------|
|ELECTRICITY| in      |%W_refrig%           |
"""


def refrigerator_create_hs():
    return """: OSMOSE HEAT_STREAMS Refrigerator

|name           |Tin        |Tout       |Hin        |Hout       |DT min/2   |alpha|
|:--------------|:----------|:----------|:----------|:----------|:----------|:----|
|evaporation    |%Evap_Tin% |%Evap_Tout%|0          |%Evap_Qmax%|%dtmin_2ph%|1    |
|condensation   |%Cond_Tin% |%Cond_Tout%|%Cond_Qmax%|0          |%dtmin_2ph%|1    |
"""


def solve_florez_project():
    return """! OSMOSE SOLVE test-project TotalCost [et1, coolingtower, furnace, heatpump, market, refrigerator]

|name|value|
|:---|:--|
|op_time|8000|
"""
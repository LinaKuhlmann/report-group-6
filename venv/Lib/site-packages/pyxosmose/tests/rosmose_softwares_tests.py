# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

import filecmp
import os
import tempfile
import unittest

from pyxosmose.rosmose import Rosmose
from pyxosmose.tests.rosmose_utility import *


class RosmoseSoftwareTests(unittest.TestCase):

    def setUp(self):
        self.ro = Rosmose()

    def tearDown(self):
        self.ro = None

    def test_vali_software_creation(self):
        res = self.ro.retrieve_type(create_vali_model())
        self.assertTrue(res[0])
        soft = self.ro.software_manager.get_model_by_name("myValiModel")
        self.assertEqual(soft["name"], "myValiModel")
        self.assertEqual(soft["software"], "VALI")
        self.assertEqual(soft["comment"], "")
        self.assertTrue(len(soft["inputs"]) == 0)
        self.assertTrue(len(soft["outputs"]) == 0)

    def test_vali_software_inputs_and_outputs(self):
        res = self.ro.retrieve_type(create_vali_model())
        self.assertTrue(res[0])
        res = self.ro.retrieve_type(create_vali_inputs())
        self.assertFalse(res[0])
        soft = self.ro.software_manager.get_model_by_name("myValiModel")
        self.assertEqual(soft["name"], "myValiModel")
        self.assertEqual(soft["software"], "VALI")
        self.assertEqual(soft["comment"], "")
        self.assertTrue(len(soft["inputs"]) == 84)
        self.assertTrue(len(soft["outputs"]) == 0)
        self.assertEqual(len(self.ro.tags_manager.tags), 84)
        res = self.ro.retrieve_type(create_vali_outputs())
        self.assertFalse(res[0])
        self.assertTrue(len(soft["inputs"]) == 84)
        dt_min_liq = list(filter(lambda input: input["name"] == "dt_min_liq", soft["inputs"]))[0]
        dt_min_gas = list(filter(lambda input: input["name"] == "dt_min_gas", soft["inputs"]))[0]
        self.assertEqual(dt_min_liq["value"], "4")
        self.assertEqual(dt_min_gas["value"], "8")
        self.assertTrue(len(soft["outputs"]) == 1)
        self.assertEqual(len(self.ro.tags_manager.tags), 85)
        res = self.ro.retrieve_type(update_vali_inputs())
        self.assertTrue(res[0])
        self.assertTrue(len(soft["inputs"]) == 84)
        dt_min_liq = list(filter(lambda input: input["name"] == "dt_min_liq", soft["inputs"]))[0]
        dt_min_gas = list(filter(lambda input: input["name"] == "dt_min_gas", soft["inputs"]))[0]
        self.assertEqual(dt_min_liq["value"], "40")
        self.assertEqual(dt_min_gas["value"], "80")
        self.assertTrue(len(soft["outputs"]) == 1)
        res = self.ro.retrieve_type(reset_vali_inputs())
        self.assertFalse(res[0])
        self.assertTrue(len(soft["inputs"]) == 0)
        self.assertTrue(len(soft["outputs"]) == 1)
        self.assertEqual(len(self.ro.tags_manager.tags), 1)
        res = self.ro.retrieve_type(reset_vali_outputs())
        self.assertFalse(res[0])
        self.assertTrue(len(soft["inputs"]) == 0)
        self.assertTrue(len(soft["outputs"]) == 0)
        self.assertEqual(len(self.ro.tags_manager.tags), 0)

    def test_vali_software_interfaces(self):
        res = self.ro.retrieve_type(create_vali_model2())
        self.assertTrue(res[0])
        res = self.ro.retrieve_type(create_vali_interfaces())
        self.assertFalse(res[0])
        soft = self.ro.software_manager.get_model_by_name("myValiModel2")
        self.assertEqual(soft["name"], "myValiModel2")
        self.assertEqual(soft["software"], "VALI")
        self.assertEqual(soft["comment"], "")
        self.assertTrue(len(soft["inputs"]) == 84)
        self.assertTrue(len(soft["outputs"]) == 1)
        self.assertEqual(len(self.ro.tags_manager.tags), 85)

    def test_aspen_software_interfaces(self):
        res = self.ro.retrieve_type(create_aspen_model())
        self.assertTrue(res[0])
        res = self.ro.retrieve_type(create_aspen_interfaces())
        self.assertFalse(res[0])
        soft = self.ro.software_manager.get_model_by_name("myAspenModel")
        self.assertEqual(soft["name"], "myAspenModel")
        self.assertEqual(soft["software"], "ASPEN")
        self.assertEqual(soft["comment"], "my aspen comment")
        self.assertTrue(len(soft["inputs"]) == 3)
        self.assertTrue(len(soft["outputs"]) == 46)
        self.assertEqual(len(self.ro.tags_manager.tags), 49)

    def test_aspen_software_inputs_and_outputs(self):
        self.ro.retrieve_type(create_aspen_model())
        res = self.ro.retrieve_type(create_aspen_inputs())
        self.assertTrue(res[0])
        soft = self.ro.software_manager.get_model_by_name("myAspenModel")
        self.assertEqual(soft["name"], "myAspenModel")
        self.assertEqual(soft["software"], "ASPEN")
        self.assertEqual(soft["comment"], "my aspen comment")
        self.assertTrue(len(soft["inputs"]) == 3)
        self.assertTrue(len(soft["outputs"]) == 0)
        self.assertEqual(len(self.ro.tags_manager.tags), 3)
        res = self.ro.retrieve_type(create_aspen_outputs())
        self.assertTrue(res[0])
        self.assertTrue(len(soft["inputs"]) == 3)
        self.assertTrue(len(soft["outputs"]) == 7)
        self.assertEqual(len(self.ro.tags_manager.tags), 10)
        res = self.ro.retrieve_type(reset_aspen_inputs())
        self.assertFalse(res[0])
        self.assertTrue(len(soft["inputs"]) == 0)
        self.assertTrue(len(soft["outputs"]) == 7)
        self.assertEqual(len(self.ro.tags_manager.tags), 7)
        res = self.ro.retrieve_type(reset_aspen_outputs())
        self.assertFalse(res[0])
        self.assertTrue(len(soft["inputs"]) == 0)
        self.assertTrue(len(soft["outputs"]) == 0)
        self.assertEqual(len(self.ro.tags_manager.tags), 0)

    # def test_vali_solve(self):
    #     self.ro.retrieve_type(create_vali_model())
    #     self.ro.retrieve_type(create_vali_inputs())
    #     # retrieve_type(create_vali_outputs())
    #     display, view, table = self.ro.retrieve_type(local_solve_my_vali_model())
    #     print(table)
    #
    # def test_aspen_solve(self):
    #     self.ro.retrieve_type(create_aspen_model())
    #     self.ro.retrieve_type(create_aspen_interfaces())
    #     display, view, table = self.ro.retrieve_type(local_solve_my_aspen_model())
    #     print(table)

    # def test_vali_solve_local_with_input_file(self):
    #     self.ro.retrieve_type(create_vali_model())
    #     display, view, table = self.ro.retrieve_type(local_solve_my_vali_model_with_input_file())
    #     print(table)

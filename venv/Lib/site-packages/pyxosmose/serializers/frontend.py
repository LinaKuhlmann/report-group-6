# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

from ..models.project import Project
from .serializer import Serializer
import pystache
import os


##
# @class Writer
# @brief A class write file using dictionaries
#
# Writer
##
class FrontendSerializer(Serializer):

    def __init__(self, project: Project):
        self.__project = project

    def serialize(self):
        pathtemp = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'templates')
        renderer = pystache.Renderer(file_encoding='utf-8', search_dirs=pathtemp, string_encoding='utf-8')
        frontend = renderer.render(renderer.load_template('frontend'), self.get_project_dictionary())
        return frontend, renderer.render(renderer.load_template('frontcsv'), self.get_project_dictionary())

    def get_project_dictionary(self):
        pervals_str = ""
        objective = self.__project.objective
        ets = []
        options = {}
        if self.__project.objective == "TOTEX":
            objective = "Layer_Cost['DefaultOpCost'] + Layer_Cost['DefaultInvCost'] + impact_weight_factor * Layer_Cost['DefaultImpact']"
        elif self.__project.objective == "weighted":
            objective = "(1-capex_weight_factor) * Layer_Cost['DefaultOpCost'] + capex_weight_factor * Layer_Cost['DefaultInvCost']"
        for i in self.__project.period_values:
            pervals_str += "%s," % i
        for et in self.__project.ets:
            ets.append({
                "et_name": et.name,
                "comma": True
            })
        ets[len(ets) - 1]["comma"] = False
        for option_name, option_value in self.__project.options.items():
            options[option_name] = []
            for value_name, value_value in option_value.items():
                options[option_name].append({'name': value_name,
                                             'value': value_value,
                                             'unescape': value_value[0] == '{',
                                             "comma": True, })
            options[option_name][len(options[option_name]) - 1]["comma"] = False
        dico = {
            'projname': self.__project.name,
            'objective': objective,
            'capex_weighted': self.__project.capex_weight_factor,
            'ets': ets,
            'periods': self.__project.periods,
            'multitime': int(self.__project.periods) > 1,
            'perkeys': self.__project.period_keys,
            'pervals': self.__project.period_values,
            'pervals_count': len(self.__project.period_values),
            'optime': pervals_str[:-1],
            'options': options
        }
        return dico

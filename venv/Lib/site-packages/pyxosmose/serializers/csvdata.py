# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

from ..models.et import Et
from .serializer import Serializer
import os

##
# @class CsvSerializer
# @brief A class write file using dictionaries
#
# Writer
##
class CsvSerializer(Serializer):

    def __init__(self, et):
        self.__et = et
        self.__text = ""

    def serialize(self):
        for i in self.__et.units:
            self.__parse_unit_params(i.unitname, i.unit_params)
            for j in i.streams:
                if not j.is_heat:
                    self.__parse_electric_text(i.unitname, j)
                else:
                    self.__parse_heat_text(i.unitname, j)
        return self.__text

    def __parse_unit_params(self, unitname, params):
        self.__text += unitname + '_cost1,'
        for param in params:
            self.__text += param.cost1 + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_cost2,'
        for param in params:
            self.__text += param.cost2 + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_cinv1,'
        for param in params:
            self.__text += param.cinv1 + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_cinv2,'
        for param in params:
            self.__text += param.cinv2 + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_imp1,'
        for param in params:
            self.__text += param.imp1 + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_imp2,'
        for param in params:
            self.__text += param.imp2 + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_fmin,'
        for param in params:
            self.__text += param.fmin + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_fmax,'
        for param in params:
            self.__text += param.fmax + ','
        self.__text = self.__text[:-1] + "\n"

    def __parse_electric_text(self, unitname, stream):
        self.__text += unitname + '_' + stream.name + '_Flow,'
        for key, value in stream.datas.items():
            self.__text += value.value + ','
        self.__text = self.__text[:-1] + "\n"

    def __parse_heat_text(self, unitname, stream):
        self.__text += unitname + '_' + stream.name + '_Tin,'
        for key, value in stream.datas.items():
            self.__text += value.tin + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_' + stream.name + '_Tout,'
        for key, value in stream.datas.items():
            self.__text += value.tout + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_' + stream.name + '_Hin,'
        for key, value in stream.datas.items():
            self.__text += value.hin + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_' + stream.name + '_Hout,'
        for key, value in stream.datas.items():
            self.__text += value.hout + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_' + stream.name + '_dTmin,'
        for key, value in stream.datas.items():
            self.__text += value.dtmin + ','
        self.__text = self.__text[:-1] + "\n"

        self.__text += unitname + '_' + stream.name + '_alpha,'
        for key, value in stream.datas.items():
            self.__text += value.alpha + ','
        self.__text = self.__text[:-1] + "\n"

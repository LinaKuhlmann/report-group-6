# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

from ..models.et import Et
from .serializer import Serializer
import pystache
import os
##
# @class Writer
# @brief A class write file using dictionaries
#
# Writer
##
class EtSerializer(Serializer):

    def __init__(self, et):
        self.__et = et

    def serialize(self):
        pathtemp = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'templates')
        renderer = pystache.Renderer(file_encoding='utf-8', search_dirs=pathtemp, string_encoding='utf-8')
        return renderer.render(renderer.load_template('et'), self.__get_project_dictionary())

    def __get_project_dictionary(self):
        inputs = []
        for unit in self.__et.units:
            input = {}
            default_param = unit.unit_params.get('default')
            if default_param is not None:
                input["cost1"] = default_param.cost1
                input["cost2"] = default_param.cost2
                input["cinv1"] = default_param.cinv1
                input["cinv2"] = default_param.cinv2
                input["imp1"] = default_param.imp1
                input["imp2"] = default_param.imp2
                input["fmin"] = default_param.fmin
                input["fmax"] = default_param.fmax
            else:
                input["cost1"] = '0'
                input["cost2"] = '0'
                input["cinv1"] = '0'
                input["cinv2"] = '0'
                input["imp1"] = '0'
                input["imp2"] = '0'
                input["fmin"] = '0'
                input["fmax"] = '0'
            input["unitname"] = unit.unitname
            input["streams"] = []
            for stream in unit.streams:
                stream_data = {}
                stream_data["name"] = stream.name
                stream_data["is_heat"] = stream.is_heat
                if stream.is_heat:
                    default_heat = stream.datas.get('default')
                    if default_heat is not None:
                        stream_data["tin"] = default_heat.tin
                        stream_data["tout"] = default_heat.tout
                        stream_data["hin"] = default_heat.hin
                        stream_data["hout"] = default_heat.hout
                        stream_data["dtmin"] = default_heat.dtmin
                        stream_data["alpha"] = default_heat.alpha
                    else:
                        stream_data["tin"] = '0'
                        stream_data["tout"] = '0'
                        stream_data["hin"] = '0'
                        stream_data["hout"] = '0'
                        stream_data["dtmin"] = '0'
                        stream_data["alpha"] = '0'
                else:
                    default_non_heat = stream.datas.get('default')
                    if default_non_heat is not None:
                        stream_data["flow"] = default_non_heat.value
                    else:
                        stream_data["flow"] = '0'
                input["streams"].append(stream_data)
            inputs.append(input)

        return {
            'et_name': self.__et.name,
            'capex': self.__et.capex_weight_factor,
            'co2_tax': self.__et.co2_tax,
            'units': self.__et.units,
            'layers': self.__et.layers,
            'inputs': inputs,
            'header': self.__et.header
        }

# Author: Michel Lopez <michel.lopez@epfl.ch>

from ..models.et import Et
from .serializer import Serializer
import pystache
import os
from collections import Counter
##
# @class Writer
# @brief A class write file using dictionaries
#
# Writer
##
class EtGraphSerializer(Serializer):

    def __init__(self, et, period='default'):
        self.__et = et
        self.__period = period

    def serialize(self):
        pathtemp = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'templates')
        renderer = pystache.Renderer(file_encoding='utf-8', search_dirs=pathtemp, string_encoding='utf-8')
        return renderer.render(renderer.load_template('etgraph'), self.__get_project_dictionary())

    def __get_project_dictionary(self):
        units = []
        in_layers = []
        out_layers = []
        for u in self.__et.units:
            if bool(u.unit_params):
                unit = {}
                unit["unitname"] = u.unitname
                unit["contains_heat"] = u.contains_heat
                unit["cost1"] = u.unit_params[self.__period].cost1
                unit["cost2"] = u.unit_params[self.__period].cost2
                unit["cinv1"] = u.unit_params[self.__period].cinv1
                unit["cinv2"] = u.unit_params[self.__period].cinv2
                heatstreams = []
                for hs in u.streams:
                    if hs.is_heat:
                        heatstream = {}
                        period = next(iter(hs.datas.keys()))
                        heatstream["is_heat_constant"] = hs.datas[self.__period].is_heat_constant
                        heatstream["is_heating"] = hs.datas[self.__period].is_heating
                        heatstream["tin"] = hs.datas[self.__period].tin
                        heatstream["hval"] = hs.datas[self.__period].hval
                        heatstream["tout"] = hs.datas[self.__period].tout
                        heatstream["tunit"] = hs.datas[self.__period].temperature_unit
                        heatstream["hunit"] = hs.datas[self.__period].hentalpy_unit
                        heatstreams.append(heatstream)
                unit["heat_streams"] = heatstreams
                resourcestreams = []
                for rs in u.streams:
                    if not rs.is_heat:
                        resourcestream = {}
                        period = next(iter(rs.datas.keys()))
                        resourcestream["in_direction"] = rs.in_direction
                        resourcestream["layer"] = rs.type
                        resourcestream["unitname"] = u.unitname
                        resourcestream["value"] = rs.datas[period].value
                        resourcestream["physical_unit"] = rs.unit
                        resourcestreams.append(resourcestream)
                        if rs.in_direction:
                            in_layers.append(rs.type)
                        else:
                            out_layers.append(rs.type)
                unit["resource_streams"] = resourcestreams
                units.append(unit)
        in_layers = list(set(in_layers))
        out_layers = list(set(out_layers))
        layers_in = [layer for layer in self.__et.layers if layer.short_name in in_layers]
        layers_out = [layer for layer in self.__et.layers if layer.short_name in out_layers]
        return {
            'units': units,
            'layers_in': layers_in,
            'layers_out': layers_out
        }

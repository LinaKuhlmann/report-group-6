# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

class UnitParam:
    def __init__(self, cost1='0', cost2='0', cinv1='0', cinv2='0', imp1='0', imp2='0', fmin='0', fmax='0'):
        self.__cost1 = cost1
        self.__cost2 = cost2
        self.__cinv1 = cinv1
        self.__cinv2 = cinv2
        self.__imp1 = imp1
        self.__imp2 = imp2
        self.__fmin = fmin
        self.__fmax = fmax

    @property
    def cost1(self):
        return self.__cost1

    @cost1.setter
    def cost1(self, value):
        if type(value) is str:
            self.__cost1 = value
        else:
            raise TypeError('Expected value as str')

    @property
    def cost2(self):
        return self.__cost2

    @cost2.setter
    def cost2(self, value):
        if type(value) is str:
            self.__cost2 = value
        else:
            raise TypeError('Expected value as str')

    @property
    def cinv1(self):
        return self.__cinv1

    @cinv1.setter
    def cinv1(self, value):
        if type(value) is str:
            self.__cinv1 = value
        else:
            raise TypeError('Expected value as str')

    @property
    def cinv2(self):
        return self.__cinv2

    @cinv2.setter
    def cinv2(self, value):
        if type(value) is str:
            self.__cinv2 = value
        else:
            raise TypeError('Expected value as str')

    @property
    def imp1(self):
        return self.__imp1

    @imp1.setter
    def imp1(self, value):
        if type(value) is str:
            self.__imp1 = value
        else:
            raise TypeError('Expected value as str')

    @property
    def imp2(self):
        return self.__imp2

    @imp2.setter
    def imp2(self, value):
        if type(value) is str:
            self.__imp2 = value
        else:
            raise TypeError('Expected value as str')

    @property
    def fmin(self):
        return self.__fmin

    @fmin.setter
    def fmin(self, value):
        if type(value) is str:
            self.__fmin = value
        else:
            raise TypeError('Expected value as str')

    @property
    def fmax(self):
        return self.__fmax

    @fmax.setter
    def fmax(self, value):
        if type(value) is str:
            self.__fmax = value
        else:
            raise TypeError('Expected value as str')

    def __eq__(self, other):
        if not isinstance(other, UnitParam):
            # don't attempt to compare against unrelated types
            return NotImplemented
        return self.__cost1 == other.__cost1 \
               and self.__cost2 == other.__cost2 \
               and self.__cinv1 == other.__cinv1 \
               and self.__cinv2 == other.__cinv2 \
               and self.__imp1 == other.__imp1 \
               and self.__imp2 == other.__imp2 \
               and self.__fmin == other.__fmin \
               and self.__fmax == other.__fmax

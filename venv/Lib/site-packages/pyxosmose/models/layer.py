# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>


class Layer:
    def __init__(self, name='', display_name='', short_name='', unit='kW', color='black'):
        self.__name = name
        self.__display_name = display_name
        self.__short_name = short_name
        self.__unit = unit
        self.__color = color

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        if type(value) is str:
            self.__name = value
        else:
            raise TypeError('Expected value as str')

    @property
    def display_name(self):
        return self.__display_name

    @display_name.setter
    def display_name(self, value):
        if type(value) is str:
            self.__display_name = value
        else:
            raise TypeError('Expected value as str')

    @property
    def short_name(self):
        return self.__short_name

    @short_name.setter
    def short_name(self, value):
        if type(value) is str:
            self.__short_name = value
        else:
            raise TypeError('Expected value as str')

    @property
    def unit(self):
        return self.__unit

    @unit.setter
    def unit(self, value):
        if type(value) is str:
            self.__unit = value
        else:
            raise TypeError('Expected value as str')

    @property
    def color(self):
        return self.__color

    @color.setter
    def color(self, value):
        if type(value) is str:
            self.__color = value
        else:
            raise TypeError('Expected value as str')

    def __eq__(self, other):
        if not isinstance(other, Layer):
            return NotImplemented
        return self.__name == other.__name \
               and self.__display_name == other.__display_name \
               and self.__short_name == other.__short_name \
               and self.__unit == other.__unit

# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

##
# @class Unit
# @brief A class Entity of project
#
# Unit
##

from .stream import Stream
from .unit_param import UnitParam


class Unit:
    def __init__(self, unitname='', type='', unit_params=None, streams=None, contains_heat=False):
        self.__unitname = unitname
        self.__type = type
        self.__unit_params = unit_params or {}
        self.__streams = streams or []
        self.__contains_heat = contains_heat

    @property
    def unitname(self):
        return self.__unitname

    @unitname.setter
    def unitname(self, value):
        if type(value) is str:
            self.__unitname = value
        else:
            raise TypeError('Expected value as str')

    @property
    def type(self):
        return self.__type

    @type.setter
    def type(self, value):
        if type(value) is str:
            self.__type = value
        else:
            raise TypeError('Expected value as str')

    @property
    def unit_params(self):
        return self.__unit_params

    @unit_params.setter
    def unit_params(self, value):
        if type(value) is list:
            self.__unit_params = value
        else:
            raise TypeError('Expected value as UnitParam')

    def add_unit_params(self, period, unit_param):
        if type(unit_param) is UnitParam:
            self.__unit_params[period] = unit_param
        else:
            raise TypeError('Expected value as UnitParam')

    @property
    def streams(self):
        return self.__streams

    @streams.setter
    def streams(self, value):
        if type(value) is list:
            self.__streams = value
        else:
            raise TypeError('Expected value as Stream')

    @property
    def contains_heat(self):
        for stream in self.__streams:
            if stream.is_heat:
                return True
        return False

    @contains_heat.setter
    def contains_heat(self, value):
        if type(value) is bool:
            self.__contains_heat = value
        else:
            raise TypeError('Expected value as bool')

    def add_stream(self, stream):
        if type(stream) is Stream:
            self.__streams.append(stream)
        else:
            raise TypeError('Expected value as Stream')

    def __eq__(self, other):
        if not isinstance(other, Unit):
            # don't attempt to compare against unrelated types
            return NotImplemented
        return self.__unitname == other.__unitname \
               and self.__type == other.__type \
               and self.__streams == other.__streams

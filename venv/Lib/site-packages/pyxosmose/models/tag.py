# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>


class Tag:
    def __init__(self, name='', value='', min='', max='', unit='', path='', description=''):
        self.__name = name
        self.__value = value
        self.__min = min
        self.__max = max
        self.__unit = unit
        self.__path = path
        self.__description = description

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        if type(name) is str:
            self.__name = name
        else:
            raise TypeError('Expected value as str')

    @property
    def value(self):
        return self.__value

    @value.setter
    def value(self, value):
        if type(value) is str:
            self.__value = value
        else:
            raise TypeError('Expected value as str')

    @property
    def min(self):
        return self.__min

    @min.setter
    def min(self, value):
        if type(value) is str:
            self.__min = min
        else:
            raise TypeError('Expected value as str')

    @property
    def max(self):
        return self.__max

    @max.setter
    def max(self, value):
        if type(value) is str:
            self.__max = max
        else:
            raise TypeError('Expected value as str')

    @property
    def unit(self):
        return self.__unit

    @unit.setter
    def unit(self, unit):
        if type(unit) is str:
            self.__unit = unit
        else:
            raise TypeError('Expected value as str')

    @property
    def path(self):
        return self.__path

    @path.setter
    def path(self, path):
        if type(path) is str:
            self.__description = path
        else:
            raise TypeError('Expected value as str')

    @property
    def description(self):
        return self.__description

    @description.setter
    def description(self, description):
        if type(description) is str:
            self.__description = description
        else:
            raise TypeError('Expected value as str')

    def __eq__(self, other):
        if not isinstance(other, Tag):
            # don't attempt to compare against unrelated types
            return NotImplemented
        return self.__name == other.__name \
            and self.__value == other.__value \
            and self.__min == other.__min \
            and self.__max == other.__max \
            and self.__unit == other.__unit \
            and self.__path == other.__path \
            and self.__description == other.__description

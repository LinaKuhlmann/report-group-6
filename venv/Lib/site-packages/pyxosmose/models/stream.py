# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>


class Stream:

    def __init__(self, name='', type='', is_heat=False, unit='kW', direction='in', datas=None):
        self.__name = name
        self.__type = type
        self.__is_heat = is_heat
        self.__unit = unit
        self.__direction = direction
        self.__in_direction = True
        self.__datas = datas or {}

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        if type(value) is str:
            self.__name = value
        else:
            raise TypeError('Expected value as str')

    @property
    def type(self):
        return self.__type

    @type.setter
    def type(self, value):
        if type(value) is str:
            self.__type = value
        else:
            raise TypeError('Expected value as str')

    @property
    def datas(self):
        return self.__datas

    @datas.setter
    def datas(self, value):
        if type(value) is list:
            self.__datas = value
        else:
            raise TypeError('Expected value as list')

    @property
    def is_heat(self):
        return self.__is_heat

    @is_heat.setter
    def is_heat(self, value):
        if type(value) is bool:
            self.__is_heat = value
        else:
            raise TypeError('Expected value as bool')

    @property
    def unit(self):
        return self.__unit

    @unit.setter
    def unit(self, value):
        if type(value) is str:
            self.__unit = value
        else:
            raise TypeError('Expected value as str')

    @property
    def direction(self):
        return self.__direction

    @direction.setter
    def direction(self, value):
        if type(value) is str:
            self.__direction = value
        else:
            raise TypeError('Expected value as str')

    @property
    def in_direction(self):
        if self.__direction == 'in':
            return True
        return False

    @in_direction.setter
    def in_direction(self, value):
        if type(value) is bool:
            self.__in_direction = value
        else:
            raise TypeError('Expected value as bool')

    def add_datas(self, period, streamData):
        self.__datas[period] = streamData

    def __eq__(self, other):
        if not isinstance(other, Stream):
            # don't attempt to compare against unrelated types
            return NotImplemented
        return self.__name == other.__name \
               and self.__type == other.__type \
               and self.__is_heat == other.__is_heat \
               and self.__unit == other.__unit \
               and self.__direction == other.__direction \
               and self.__datas == other.__datas

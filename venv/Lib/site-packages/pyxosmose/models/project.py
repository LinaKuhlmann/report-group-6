# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

##
# @class Project
# @brief A class Entity of project
#
# Project
##

from .et import Et


class Project:

    def __init__(self):
        self.__name = ""
        self.__objective = ""
        self.__capex_weight_factor = 0.2
        self.__co2_tax = 0
        self.__elec_in = ""
        self.__elec_out = ""
        self.__period_keys = []
        self.__period_values = []
        self.__ets = []
        self.__options: dict = {}

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name):
        if type(name) is str:
            self.__name = name
        else:
            raise TypeError('Expected value as str')

    @property
    def objective(self):
        return self.__objective

    @objective.setter
    def objective(self, value):
        if type(value) is str:
            self.__objective = value
        else:
            raise TypeError('Expected value as str')

    @property
    def capex_weight_factor(self):
        return self.__capex_weight_factor

    @capex_weight_factor.setter
    def capex_weight_factor(self, value):
        if type(value) is float:
            if 0 <= value <= 1:
                self.__capex_weight_factor = value
            else:
                self.__capex_weight_factor = 0.2
        else:
            self.__capex_weight_factor = 0.2

    @property
    def co2_tax(self):
        return self.__co2_tax

    @co2_tax.setter
    def co2_tax(self, value):
        if type(value) is float or type(value) is int:
            self.__co2_tax = value
        else:
            self.__capex_weight_factor = 0

    @property
    def elec_in(self):
        return self.__elec_in

    @elec_in.setter
    def elec_in(self, value):
        if type(value) is str:
            self.__elec_in = value
        else:
            raise TypeError('Expected value as str')

    @property
    def elec_out(self):
        return self.__elec_out

    @elec_out.setter
    def elec_out(self, value):
        if type(value) is str:
            self.__elec_out = value
        else:
            raise TypeError('Expected value as str')

    @property
    def period_keys(self):
        return self.__period_keys

    @period_keys.setter
    def period_keys(self, value):
        if type(value) is list:
            self.__period_keys = value
        else:
            raise TypeError('Expected value as list')

    @property
    def period_values(self):
        return self.__period_values

    @period_values.setter
    def period_values(self, value):
        if type(value) is list:
            self.__period_values = value
        else:
            raise TypeError('Expected value as list')

    @property
    def ets(self):
        return self.__ets

    @ets.setter
    def ets(self, value):
        if type(value) is Et:
            self.__ets.append(value)
        else:
            raise TypeError('Expected value as Et')

    @property
    def options(self):
        return self.__options

    @options.setter
    def options(self, value):
        self.__options = value

# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

##
# @class ET
# @brief A class Entity of project
#
# ET
##
from .unit import Unit
from .header import Header
from .layer import Layer


class Et:

    def __init__(self, name, capex_weight_factor=None, co2_tax=None):
        self.__name = name
        self.__capex_weight_factor = capex_weight_factor
        self.__co2_tax = co2_tax
        self.__units = []
        self.__layers = []
        self.__header = None

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        if type(value) is str:
            self.__name = value
        else:
            raise TypeError('Expected name as str')

    @property
    def capex_weight_factor(self):
        return self.__capex_weight_factor

    @capex_weight_factor.setter
    def capex_weight_factor(self, value):
        if type(value) is str:
            self.__capex_weight_factor = value
        else:
            raise TypeError('Expected value as str')

    @property
    def co2_tax(self):
        return self.__co2_tax

    @co2_tax.setter
    def co2_tax(self, value):
        if type(value) is str:
            self.__co2_tax = value
        else:
            raise TypeError('Expected value as str')

    @property
    def units(self):
        return self.__units

    @units.setter
    def units(self, value):
        if type(value) is list:
            for u in value:
                if type(u) is not Unit:
                    raise TypeError('Expected value as Unit')
            self.__units = value
        else:
            raise TypeError('Expected value as List')

    @property
    def layers(self):
        return self.__layers

    @layers.setter
    def layers(self, value):
        if type(value) is list:
            self.__layers = value
        else:
            raise TypeError('Expected value as list')

    def add_layers(self, layer):
        if type(layer) is Layer:
            self.__layers.append(layer)
        else:
            raise TypeError('Expected value as Layer')

    @property
    def header(self):
        return self.__header

    @header.setter
    def header(self, value):
        if type(value) is Header:
            self.__header.append(value)
        else:
            raise TypeError('Expected value as Header')

# All rights reserved. ECOLE POLYTECHNIQUE FEDERALE DE LAUSANNE, Switzerland,
# IPESE Laboratory, Copyright 2018
# This work can be distributed under the CC BY-NC-SA 4.0 License.
# See the LICENSE file for more details.
#
# Author: Michel Lopez <michel.lopez@epfl.ch>

##
# @class Header
# @brief A class Entity of project
#
# Header
##


class Header:

    def __init__(self, name='', display_name='', authors=[], creation_date='', versions='', title='', confidentiality='',
                 description='', references=[], notes=[]):
        self.__name = name
        self.__display_name = display_name
        self.__authors = authors
        self.__creation_date = creation_date
        self.__versions = versions
        self.__title = title
        self.__confidentiality = confidentiality
        self.__description = description
        self.__references = references
        self.__notes = notes

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, value):
        if type(value) is str:
            self.__name = value
        else:
            raise TypeError('Expected value as str')

    @property
    def display_name(self):
        return self.__display_name

    @display_name.setter
    def display_name(self, value):
        if type(value) is str:
            self.__display_name = value
        else:
            raise TypeError('Expected value as str')

    @property
    def creation_date(self):
        return self.__creation_date

    @creation_date.setter
    def creation_date(self, value):
        if type(value) is str:
            self.__creation_date = value
        else:
            raise TypeError('Expected value as str')

    @property
    def versions(self):
        return self.__versions

    @versions.setter
    def versions(self, value):
        if type(value) is str:
            self.__versions = value
        else:
            raise TypeError('Expected value as str')

    @property
    def title(self):
        return self.__title

    @title.setter
    def title(self, value):
        if type(value) is str:
            self.__title = value
        else:
            raise TypeError('Expected value as str')

    @property
    def confidentiality(self):
        return self.__confidentiality

    @confidentiality.setter
    def confidentiality(self, value):
        if type(value) is str:
            self.__confidentiality = value
        else:
            raise TypeError('Expected value as str')

    @property
    def description(self):
        return self.__description

    @description.setter
    def description(self, value):
        if type(value) is str:
            self.__description = value
        else:
            raise TypeError('Expected value as str')

    @property
    def authors(self):
        return self.__authors

    @authors.setter
    def authors(self, value):
        if type(value) is list:
            self.__authors = value
        else:
            raise TypeError('Expected value as list')

    @property
    def references(self):
        return self.__references

    @references.setter
    def references(self, value):
        if type(value) is list:
            self.__references = value
        else:
            raise TypeError('Expected value as list')

    @property
    def notes(self):
        return self.__notes

    @notes.setter
    def notes(self, value):
        if type(value) is list:
            self.__notes = value
        else:
            raise TypeError('Expected value as list')


import pika
import uuid
import json
from pyxosmose.solvers.communication.utils import load_key
from cryptography.fernet import Fernet


class XosmoseClient(object):

    def __init__(self):
        creds = pika.PlainCredentials('ipese', 'ipesePwd2021')
        self.connection = pika.BlockingConnection(
            pika.ConnectionParameters('128.178.117.73', 5672, '/', creds))

        self.channel = self.connection.channel()

        result = self.channel.queue_declare(queue='', exclusive=True)
        self.callback_queue = result.method.queue

        self.channel.basic_consume(
            queue=self.callback_queue,
            on_message_callback=self.on_response,
            auto_ack=True)

    def on_response(self, ch, method, props, body):
        if self.corr_id == props.correlation_id:
            self.response = body

    def call(self, solver, file, file_name):
        key = load_key()
        f = Fernet(key)
        with open(file, 'rb') as file:
            byte_file = file.read()

        encrypted = f.encrypt(byte_file)

        body = {
            'solver': solver,
            'file_name': file_name,
            'file': str(encrypted, encoding='utf8')
        }

        self.response = None
        self.corr_id = str(uuid.uuid4())
        self.channel.basic_publish(
            exchange='',
            routing_key='xosmose_queue',
            properties=pika.BasicProperties(
                reply_to=self.callback_queue,
                correlation_id=self.corr_id,), body=json.dumps(body))
        while self.response is None:
            self.connection.process_data_events()
        return self.response

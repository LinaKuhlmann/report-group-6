import subprocess
import pystache

from pyxosmose.solvers.app_own_exception import SolverError


class ValiSolver:
    def __init__(self, cwd):
        self.__calculation_repository = cwd

    def solve(self, run_file):
        self.exec_vali(run_file)
        return self.parse_result()

    def parse_result(self):
        result = []
        with open(self.__calculation_repository + '/vali_output_tags.txt', 'r') as result_file:
            for line in result_file:
                output = {}
                line = line.strip('\n').split()
                if line[0] != '!':
                    output['name'] = line[0]
                    output['job'] = line[3]
                    output['unit'] = line[5]
                    result.append(output)
        return result

    def exec_vali(self, run_file):
        commands = '''C:/Belsim/bin/vali.exe {}'''.format(run_file)
        p = subprocess.Popen(commands, shell=True, cwd=self.__calculation_repository, stdin=subprocess.PIPE, stdout=subprocess.PIPE,
                             stderr=subprocess.PIPE)
        output, err = p.communicate()
        decoded_output = output.decode('utf-8')
        decoded_err = err.decode('utf-8')
        if decoded_err != '':
            err = decoded_err.split('\n')
            err = " ".join(err)
            raise Exception(err)
        return decoded_output

    def generate_vali_files_with_input(self, file_name, input_file):
        template_vif = """{{blsFile}}
MAIN
-bat -nos -2sl -r2v -SQP

{{input_file}}
"""
        vif = pystache.render(template_vif, {'blsFile': file_name, 'input_file': input_file})
        vif_path = self.__calculation_repository + '/run.vif'
        with open(vif_path, 'w') as vf:
            vf.write(vif)
        return 'run.vif'

    def generate_vali_files(self, file_name, inputs):
        template_vif = """{{blsFile}}
MAIN
-bat -nos -2sl -r2v -SQP

temp_mea.mea
"""
        template_mea = """{{#tags}}
{{name}} {{value}} {{accuracy}} {{{! unit}}}
{{/tags}}

ARCHIVE vali_output_tags.txt
DATA TAG
"""

        def format_object(obj):
            name = obj['name']
            value = obj['value'] if 'value' in obj else obj['default']
            accuracy = obj['accuracy'] if 'accuracy' in obj else 'CST'
            unit = obj['unit'] if 'unit' in obj else '-'
            return {
                'name': name,
                'value': value,
                'accuracy': accuracy,
                'unit': unit
            }

        tags = list(map(format_object, inputs))
        vif = pystache.render(template_vif, {'blsFile': file_name})
        mea = pystache.render(template_mea, {'tags': tags})
        vif_path = self.__calculation_repository + '/run.vif'
        mea_path = self.__calculation_repository + '/temp_mea.mea'
        with open(vif_path, 'w') as vf:
            vf.write(vif)
        with open(mea_path, 'w') as mf:
            mf.write(mea)
        return 'run.vif'

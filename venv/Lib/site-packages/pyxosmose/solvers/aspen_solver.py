import os
if os.name == 'nt':
    import pythoncom
    import win32com.client as win32
from pathlib import Path
import psutil

from datetime import datetime
import time


class AspenSolver(object):
    def __init__(self, model_path):
        pythoncom.CoInitialize()
        self.__model_path = Path(model_path)
        self.__aspen = win32.Dispatch("Apwn.Document")
        self.__aspen.InitFromArchive2(str(self.__model_path.absolute()))
        self.__root = self.__aspen.Tree

    def run(self):
        self.__aspen.Engine.Run2()

    def find_node(self, path):
        return self.__root.FindNode(path)

    def set_value(self, path, value):
        self.find_node(path).Value = value

    def get_value(self, path):
        return self.find_node(path).GetValue()

    def get_outputs(self, outputs):
        for el in outputs:
            el["job"] = self.get_value(el["path"])
        return outputs

    def close(self):
        self.__aspen.Quit()
        del self.__aspen
        pythoncom.CoUninitialize()

        process_name = "AspenPlus.exe"

        for proc in psutil.process_iter():
            # check whether the process name matches
            if proc.name() == process_name:
                proc.kill()

        time.sleep(5)

    @property
    def visible(self):
        return self.__aspen.Visible

    @visible.setter
    def visible(self, value):
        self.__aspen.Visible = value
